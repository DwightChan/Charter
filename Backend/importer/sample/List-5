From ramakrishna.malli at gmail.com  Mon Feb 22 06:29:58 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Mon, 22 Feb 2016 17:59:58 +0530
Subject: [swift-users] libswift frontend ios
Message-ID: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>

HI,

How can I compile the swift front-end for iOS.
the build-script mentioned only Swift Standard Library for iOS.

I have read the build-script-impl, it does have the iOS build flags, but
are they only for building the standard library  or am I missing something.

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/e28527a5/attachment.html>

From stephen.celis at gmail.com  Mon Feb 22 09:44:23 2016
From: stephen.celis at gmail.com (Stephen Celis)
Date: Mon, 22 Feb 2016 10:44:23 -0500
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
Message-ID: <E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>

Hi all,

I've also been having trouble getting a Swift interface to LLVM's C API. The basic gist is here:

https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3 <https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3>

I've:

- Installed LLVM via homebrew, so it lives in "/usr/local/opt/llvm" (I've also built LLVM myself and have the same ).
- Passed "-I" and "-L" to send includes/lib paths to the "-Xcc" and "-Xlinker" flags. (Can a module map or package be configured directly with these paths? Or do all dependent projects need to use these flags, as well?
- Added many more LLVM headers/links to the module map and continued to have the same issue.

The linker's still having trouble. I'm probably missing something very basic.

Stephen

> On Jan 4, 2016, at 1:08 PM, Daniel Dunbar via swift-users <swift-users at swift.org> wrote:
> 
> You can't do this via the package manager, but you can include "link" declarations in the module map itself which specify additional linker arguments to plumb through when that module is used. See:
>   http://clang.llvm.org/docs/Modules.html#link-declaration <http://clang.llvm.org/docs/Modules.html#link-declaration>
> 
> Here is a concrete example, which is how Swift knows to automatically link libpthread and libdl when Glibc is used:
>   https://github.com/apple/swift/blob/master/stdlib/public/Glibc/module.map.in <https://github.com/apple/swift/blob/master/stdlib/public/Glibc/module.map.in>
> 
>  - Daniel
> 
>> On Jan 1, 2016, at 4:48 PM, Ilija Tovilo via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote: 
>> 
>> Happy new year everyone! 
>> 
>> I’m writing a wrapper around the LLVM-C API for Swift and thought it’d be fun to use the Swift Package Manager.
>> So I created a repository for the module.modulemap that includes the relevant .h files (as instructed in Documentation/SystemModules.md in the GitHub repository).
>> 
>> The package itself compiles fine and building the project that includes it works too, except that it doesn’t link. 
>> The problem is that you have to pass some LLVM linker flags and I have no idea how to do that with the Swift Package Manager.
>> 
>> I’ve searched the tutorials, documentation and the source code but couldn’t find a solution.
>> Is there a way to add linker flags / compile flags to your Package.swift file?
>> 
>> It would be helpful to pass those flags manually, at least until the package manager is mature enough to handle those things on its own.
>> 
>> Thanks for the help!
>> 
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org <mailto:swift-users at swift.org>
>> https://lists.swift.org/mailman/listinfo/swift-users
> 
> 
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/4c9ab706/attachment.html>

From mscreboucas at gmail.com  Mon Feb 22 11:22:00 2016
From: mscreboucas at gmail.com (=?UTF-8?Q?Marcel_Rebou=C3=A7as?=)
Date: Mon, 22 Feb 2016 14:22:00 -0300
Subject: [swift-users] Help on how to compile a project.
Message-ID: <CAAhzreCNtka4b7LO1fV8Pm1o5zx33dm2d8NCNeqw5hJfhZ0pTQ@mail.gmail.com>

Hello all,


I’ve been using Swift for some time, and decided to learn deeper about the
language and the source code. I plan to try to modify a version of its
compiler in order to generate some code metrics (e.g. Depth of Inheritance
(DIT)) to the classes of the projects compiled by it. All in all, this is
the first time I am trying doing something like it - first time working in
a open source project -, and I’m lost.


*So, first, I would like to know if there is a way to compile xcode
projects (and all classes within it) using the Swift version that I built
from sources. *


I was able to correctly build Swift on my mac. Cloned the main
repositories, and built using swift/utils/build-script.

I am able to run .swift files using xcrun (i.e. xcrun
…/build/Ninja-DebugAssert/swift-macosx-x86_64/bin/swift  -Ounchecked -gnone
example.swift).


But I couldn’t find a way to compile complete xcode projects, that include
UIKit and other imports.


Is it possible to do this?



In the future, I then plan to generate extra output files from the
compilation process.


Thank you very much.


Marcel Rebouças
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/7da0fcaa/attachment.html>

From ankit at ankit.im  Mon Feb 22 11:39:32 2016
From: ankit at ankit.im (Ankit Agarwal)
Date: Mon, 22 Feb 2016 23:09:32 +0530
Subject: [swift-users] Help on how to compile a project.
In-Reply-To: <CAAhzreCNtka4b7LO1fV8Pm1o5zx33dm2d8NCNeqw5hJfhZ0pTQ@mail.gmail.com>
References: <CAAhzreCNtka4b7LO1fV8Pm1o5zx33dm2d8NCNeqw5hJfhZ0pTQ@mail.gmail.com>
Message-ID: <CAHfQiGu+6rLp-k6W3QdB0LebOFG=pWKsdxX2t2eWxcDrRNv0_A@mail.gmail.com>

You should def look at https://github.com/apple/swift-package-manager
It won't give you UIKit but will give you Foundation etc on OSX and the
opensource Foundation (under active development) on Linux

On Mon, Feb 22, 2016 at 10:52 PM, Marcel Rebouças <swift-users at swift.org>
wrote:

> Hello all,
>
>
> I’ve been using Swift for some time, and decided to learn deeper about the
> language and the source code. I plan to try to modify a version of its
> compiler in order to generate some code metrics (e.g. Depth of Inheritance
> (DIT)) to the classes of the projects compiled by it. All in all, this is
> the first time I am trying doing something like it - first time working in
> a open source project -, and I’m lost.
>
>
> *So, first, I would like to know if there is a way to compile xcode
> projects (and all classes within it) using the Swift version that I built
> from sources. *
>
>
> I was able to correctly build Swift on my mac. Cloned the main
> repositories, and built using swift/utils/build-script.
>
> I am able to run .swift files using xcrun (i.e. xcrun
> …/build/Ninja-DebugAssert/swift-macosx-x86_64/bin/swift  -Ounchecked -gnone
> example.swift).
>
>
> But I couldn’t find a way to compile complete xcode projects, that include
> UIKit and other imports.
>
>
> Is it possible to do this?
>
>
>
> In the future, I then plan to generate extra output files from the
> compilation process.
>
>
> Thank you very much.
>
>
> Marcel Rebouças
>
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users
>
>


-- 
Ankit
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/9bf143fd/attachment.html>

From shawnce at gmail.com  Mon Feb 22 11:46:57 2016
From: shawnce at gmail.com (Shawn Erickson)
Date: Mon, 22 Feb 2016 17:46:57 +0000
Subject: [swift-users] Help on how to compile a project.
In-Reply-To: <CAHfQiGu+6rLp-k6W3QdB0LebOFG=pWKsdxX2t2eWxcDrRNv0_A@mail.gmail.com>
References: <CAAhzreCNtka4b7LO1fV8Pm1o5zx33dm2d8NCNeqw5hJfhZ0pTQ@mail.gmail.com>
	<CAHfQiGu+6rLp-k6W3QdB0LebOFG=pWKsdxX2t2eWxcDrRNv0_A@mail.gmail.com>
Message-ID: <CAGkFtXz-agE6hAcUwGqBDjWnyO6ya2YLVx7VsU_eS2EZFiueXw@mail.gmail.com>

I believe he is asking how to get Xcode to use a locally built (and
possibly modified) version of swift/compiler. Then using Xcode pointed at
this alternate tools chain to build arbitrary projects that may be using
things from normal Apple frameworks, etc.

I have limit web access at the moment but I believe that is documented on
the org site.
On Mon, Feb 22, 2016 at 9:39 AM Ankit Agarwal via swift-users <
swift-users at swift.org> wrote:

> You should def look at https://github.com/apple/swift-package-manager
> It won't give you UIKit but will give you Foundation etc on OSX and the
> opensource Foundation (under active development) on Linux
>
> On Mon, Feb 22, 2016 at 10:52 PM, Marcel Rebouças <swift-users at swift.org>
> wrote:
>
>> Hello all,
>>
>>
>> I’ve been using Swift for some time, and decided to learn deeper about
>> the language and the source code. I plan to try to modify a version of its
>> compiler in order to generate some code metrics (e.g. Depth of Inheritance
>> (DIT)) to the classes of the projects compiled by it. All in all, this is
>> the first time I am trying doing something like it - first time working in
>> a open source project -, and I’m lost.
>>
>>
>> *So, first, I would like to know if there is a way to compile xcode
>> projects (and all classes within it) using the Swift version that I built
>> from sources. *
>>
>>
>> I was able to correctly build Swift on my mac. Cloned the main
>> repositories, and built using swift/utils/build-script.
>>
>> I am able to run .swift files using xcrun (i.e. xcrun
>> …/build/Ninja-DebugAssert/swift-macosx-x86_64/bin/swift  -Ounchecked -gnone
>> example.swift).
>>
>>
>> But I couldn’t find a way to compile complete xcode projects, that
>> include UIKit and other imports.
>>
>>
>> Is it possible to do this?
>>
>>
>>
>> In the future, I then plan to generate extra output files from the
>> compilation process.
>>
>>
>> Thank you very much.
>>
>>
>> Marcel Rebouças
>>
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org
>> https://lists.swift.org/mailman/listinfo/swift-users
>>
>>
>
>
> --
> Ankit
>
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/8d80b844/attachment.html>

From jgroff at apple.com  Mon Feb 22 11:50:01 2016
From: jgroff at apple.com (Joe Groff)
Date: Mon, 22 Feb 2016 09:50:01 -0800
Subject: [swift-users] libswift frontend ios
In-Reply-To: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
Message-ID: <B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>

On Feb 22, 2016, at 4:29 AM, Ramakrishna Mallireddy via swift-users <swift-users at swift.org> wrote:
> 
> HI,
> 
> How can I compile the swift front-end for iOS.
> the build-script mentioned only Swift Standard Library for iOS.
> 
> I have read the build-script-impl, it does have the iOS build flags, but are they only for building the standard library  or am I missing something.

That's right, the build script only builds the runtime libraries for iOS, not the compiler itself. We don't build or test the compiler on iOS since that's not normally useful for Xcode development.

-Joe

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/efb6b00a/attachment.html>

From mscreboucas at gmail.com  Mon Feb 22 11:55:33 2016
From: mscreboucas at gmail.com (=?UTF-8?Q?Marcel_Rebou=C3=A7as?=)
Date: Mon, 22 Feb 2016 14:55:33 -0300
Subject: [swift-users] Help on how to compile a project.
In-Reply-To: <CAGkFtXz-agE6hAcUwGqBDjWnyO6ya2YLVx7VsU_eS2EZFiueXw@mail.gmail.com>
References: <CAAhzreCNtka4b7LO1fV8Pm1o5zx33dm2d8NCNeqw5hJfhZ0pTQ@mail.gmail.com>
	<CAHfQiGu+6rLp-k6W3QdB0LebOFG=pWKsdxX2t2eWxcDrRNv0_A@mail.gmail.com>
	<CAGkFtXz-agE6hAcUwGqBDjWnyO6ya2YLVx7VsU_eS2EZFiueXw@mail.gmail.com>
Message-ID: <CAAhzreCUpVWOQnrtu62pPmefu0ZPMJaKM0BGDyLCerqyihfhbA@mail.gmail.com>

Hello Shawn, thanks for the response.

I believe creating an alternative tool chain and setting up Xcode to use it
would work for me. I didn't thought of it, since at first I thought of
doing it kinda as a third party, only using the console. I'll start looking
on how to do it with the Xcode.

2016-02-22 14:46 GMT-03:00 Shawn Erickson <shawnce at gmail.com>:

> I believe he is asking how to get Xcode to use a locally built (and
> possibly modified) version of swift/compiler. Then using Xcode pointed at
> this alternate tools chain to build arbitrary projects that may be using
> things from normal Apple frameworks, etc.
>
> I have limit web access at the moment but I believe that is documented on
> the org site.
>
> On Mon, Feb 22, 2016 at 9:39 AM Ankit Agarwal via swift-users <
> swift-users at swift.org> wrote:
>
>> You should def look at https://github.com/apple/swift-package-manager
>> It won't give you UIKit but will give you Foundation etc on OSX and the
>> opensource Foundation (under active development) on Linux
>>
>> On Mon, Feb 22, 2016 at 10:52 PM, Marcel Rebouças <swift-users at swift.org>
>> wrote:
>>
>>> Hello all,
>>>
>>>
>>> I’ve been using Swift for some time, and decided to learn deeper about
>>> the language and the source code. I plan to try to modify a version of its
>>> compiler in order to generate some code metrics (e.g. Depth of Inheritance
>>> (DIT)) to the classes of the projects compiled by it. All in all, this is
>>> the first time I am trying doing something like it - first time working in
>>> a open source project -, and I’m lost.
>>>
>>>
>>> *So, first, I would like to know if there is a way to compile xcode
>>> projects (and all classes within it) using the Swift version that I built
>>> from sources. *
>>>
>>>
>>> I was able to correctly build Swift on my mac. Cloned the main
>>> repositories, and built using swift/utils/build-script.
>>>
>>> I am able to run .swift files using xcrun (i.e. xcrun
>>> …/build/Ninja-DebugAssert/swift-macosx-x86_64/bin/swift  -Ounchecked -gnone
>>> example.swift).
>>>
>>>
>>> But I couldn’t find a way to compile complete xcode projects, that
>>> include UIKit and other imports.
>>>
>>>
>>> Is it possible to do this?
>>>
>>>
>>>
>>> In the future, I then plan to generate extra output files from the
>>> compilation process.
>>>
>>>
>>> Thank you very much.
>>>
>>>
>>> Marcel Rebouças
>>>
>>> _______________________________________________
>>> swift-users mailing list
>>> swift-users at swift.org
>>> https://lists.swift.org/mailman/listinfo/swift-users
>>>
>>>
>>
>>
>> --
>> Ankit
>>
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org
>> https://lists.swift.org/mailman/listinfo/swift-users
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/906d1de4/attachment.html>

From max.howell at apple.com  Mon Feb 22 12:06:08 2016
From: max.howell at apple.com (Max Howell)
Date: Mon, 22 Feb 2016 10:06:08 -0800
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
	<E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
Message-ID: <5209EAD0-D5EB-4C0C-ACA0-5F727F699254@apple.com>

Possibly LLVMGetGlobalContext is not a real symbol?

If it is a #define then it will not always get mapped by swiftc to the same symbol in Swift.

> Hi all,
> 
> I've also been having trouble getting a Swift interface to LLVM's C API. The basic gist is here:
> 
> https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3 <https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3>
> 
> I've:
> 
> - Installed LLVM via homebrew, so it lives in "/usr/local/opt/llvm" (I've also built LLVM myself and have the same ).
> - Passed "-I" and "-L" to send includes/lib paths to the "-Xcc" and "-Xlinker" flags. (Can a module map or package be configured directly with these paths? Or do all dependent projects need to use these flags, as well?
> - Added many more LLVM headers/links to the module map and continued to have the same issue.
> 
> The linker's still having trouble. I'm probably missing something very basic.
> 
> Stephen
> 
>> On Jan 4, 2016, at 1:08 PM, Daniel Dunbar via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote:
>> 
>> You can't do this via the package manager, but you can include "link" declarations in the module map itself which specify additional linker arguments to plumb through when that module is used. See:
>>   http://clang.llvm.org/docs/Modules.html#link-declaration <http://clang.llvm.org/docs/Modules.html#link-declaration>
>> 
>> Here is a concrete example, which is how Swift knows to automatically link libpthread and libdl when Glibc is used:
>>   https://github.com/apple/swift/blob/master/stdlib/public/Glibc/module.map.in <https://github.com/apple/swift/blob/master/stdlib/public/Glibc/module.map.in>
>> 
>>  - Daniel
>> 
>>> On Jan 1, 2016, at 4:48 PM, Ilija Tovilo via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote: 
>>> 
>>> Happy new year everyone! 
>>> 
>>> I’m writing a wrapper around the LLVM-C API for Swift and thought it’d be fun to use the Swift Package Manager.
>>> So I created a repository for the module.modulemap that includes the relevant .h files (as instructed in Documentation/SystemModules.md in the GitHub repository).
>>> 
>>> The package itself compiles fine and building the project that includes it works too, except that it doesn’t link. 
>>> The problem is that you have to pass some LLVM linker flags and I have no idea how to do that with the Swift Package Manager.
>>> 
>>> I’ve searched the tutorials, documentation and the source code but couldn’t find a solution.
>>> Is there a way to add linker flags / compile flags to your Package.swift file?
>>> 
>>> It would be helpful to pass those flags manually, at least until the package manager is mature enough to handle those things on its own.
>>> 
>>> Thanks for the help!
>>> 
>>> _______________________________________________
>>> swift-users mailing list
>>> swift-users at swift.org <mailto:swift-users at swift.org>
>>> https://lists.swift.org/mailman/listinfo/swift-users <https://lists.swift.org/mailman/listinfo/swift-users>
>> 
>> 
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org <mailto:swift-users at swift.org>
>> https://lists.swift.org/mailman/listinfo/swift-users
> 
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/7905b751/attachment.html>

From max.howell at apple.com  Mon Feb 22 12:08:49 2016
From: max.howell at apple.com (Max Howell)
Date: Mon, 22 Feb 2016 10:08:49 -0800
Subject: [swift-users] Help on how to compile a project.
In-Reply-To: <CAAhzreCNtka4b7LO1fV8Pm1o5zx33dm2d8NCNeqw5hJfhZ0pTQ@mail.gmail.com>
References: <CAAhzreCNtka4b7LO1fV8Pm1o5zx33dm2d8NCNeqw5hJfhZ0pTQ@mail.gmail.com>
Message-ID: <AB2E70C9-9B1E-4FA1-968A-D4E8A6945A43@apple.com>

> So, first, I would like to know if there is a way to compile xcode projects (and all classes within it) using the Swift version that I built from sources. 

Hi Marcel,

I actually do this.

What I did is: 

1. Make a recursive copy of a xctoolchain.
2. Replace all the parts in that new toolchain with symlinks to the built versions
3. Edit the Info.plist to give the toolchain a unique name

It’s a hack, but currently it is otherwise quite problematic to build your own toolchain. There is a ticket open to make the build-script capable of this however, so hopefully this will be implemented.

Max

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/8c943d22/attachment.html>

From gribozavr at gmail.com  Mon Feb 22 12:13:37 2016
From: gribozavr at gmail.com (Dmitri Gribenko)
Date: Mon, 22 Feb 2016 10:13:37 -0800
Subject: [swift-users] Help on how to compile a project.
In-Reply-To: <AB2E70C9-9B1E-4FA1-968A-D4E8A6945A43@apple.com>
References: <CAAhzreCNtka4b7LO1fV8Pm1o5zx33dm2d8NCNeqw5hJfhZ0pTQ@mail.gmail.com>
	<AB2E70C9-9B1E-4FA1-968A-D4E8A6945A43@apple.com>
Message-ID: <CA+Y5xYedPk8DZMaAyGQwv7pf1YyRa6m9i4D1kuo3Wi+6QFHgdQ@mail.gmail.com>

On Mon, Feb 22, 2016 at 10:08 AM, Max Howell via swift-users
<swift-users at swift.org> wrote:
> So, first, I would like to know if there is a way to compile xcode projects
> (and all classes within it) using the Swift version that I built from
> sources.
>
>
> Hi Marcel,
>
> I actually do this.
>
> What I did is:
>
> 1. Make a recursive copy of a xctoolchain.
> 2. Replace all the parts in that new toolchain with symlinks to the built
> versions
> 3. Edit the Info.plist to give the toolchain a unique name
>
> It’s a hack, but currently it is otherwise quite problematic to build your
> own toolchain. There is a ticket open to make the build-script capable of
> this however, so hopefully this will be implemented.

build-script can do this.  See my last comment in
https://github.com/apple/swift/pull/1267 for an example.

Dmitri

-- 
main(i,j){for(i=2;;i++){for(j=2;j<i;j++){if(!(i%j)){j=0;break;}}if
(j){printf("%d\n",i);}}} /*Dmitri Gribenko <gribozavr at gmail.com>*/

From stephen.celis at gmail.com  Mon Feb 22 12:14:29 2016
From: stephen.celis at gmail.com (Stephen Celis)
Date: Mon, 22 Feb 2016 13:14:29 -0500
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <5209EAD0-D5EB-4C0C-ACA0-5F727F699254@apple.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
	<E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
	<5209EAD0-D5EB-4C0C-ACA0-5F727F699254@apple.com>
Message-ID: <5EAFB02E-B9A8-4F26-AC82-5B8DCB697294@gmail.com>

> On Feb 22, 2016, at 1:06 PM, Max Howell <max.howell at apple.com> wrote:
> 
> Possibly LLVMGetGlobalContext is not a real symbol?
> 
> If it is a #define then it will not always get mapped by swiftc to the same symbol in Swift.

Hm, it definitely appears to be there:

  ~ $ nm -g /usr/local/opt/llvm/lib/libLLVMCore.a | grep LLVMGetGlobalContext
  0000000000000081 T _LLVMGetGlobalContext

And the matching header definition:

  ~ $ grep LLVMGetGlobalContext /usr/local/opt/llvm/include/llvm-c/Core.h
  LLVMContextRef LLVMGetGlobalContext(void);

Stephen

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/fa96dcea/attachment.html>

From mscreboucas at gmail.com  Mon Feb 22 12:27:39 2016
From: mscreboucas at gmail.com (=?UTF-8?Q?Marcel_Rebou=C3=A7as?=)
Date: Mon, 22 Feb 2016 15:27:39 -0300
Subject: [swift-users] Help on how to compile a project.
In-Reply-To: <CA+Y5xYedPk8DZMaAyGQwv7pf1YyRa6m9i4D1kuo3Wi+6QFHgdQ@mail.gmail.com>
References: <CAAhzreCNtka4b7LO1fV8Pm1o5zx33dm2d8NCNeqw5hJfhZ0pTQ@mail.gmail.com>
	<AB2E70C9-9B1E-4FA1-968A-D4E8A6945A43@apple.com>
	<CA+Y5xYedPk8DZMaAyGQwv7pf1YyRa6m9i4D1kuo3Wi+6QFHgdQ@mail.gmail.com>
Message-ID: <CAAhzreAjn1XB7vck4eFYqL5VCmYYRbCmCV9+xTwD8PRpUdo0_w@mail.gmail.com>

Hello Max and Dmitri, thank you very much for the response.

I'll try those steps/commands later tonight. I believe this will work for
me.

2016-02-22 15:13 GMT-03:00 Dmitri Gribenko <gribozavr at gmail.com>:

> On Mon, Feb 22, 2016 at 10:08 AM, Max Howell via swift-users
> <swift-users at swift.org> wrote:
> > So, first, I would like to know if there is a way to compile xcode
> projects
> > (and all classes within it) using the Swift version that I built from
> > sources.
> >
> >
> > Hi Marcel,
> >
> > I actually do this.
> >
> > What I did is:
> >
> > 1. Make a recursive copy of a xctoolchain.
> > 2. Replace all the parts in that new toolchain with symlinks to the built
> > versions
> > 3. Edit the Info.plist to give the toolchain a unique name
> >
> > It’s a hack, but currently it is otherwise quite problematic to build
> your
> > own toolchain. There is a ticket open to make the build-script capable of
> > this however, so hopefully this will be implemented.
>
> build-script can do this.  See my last comment in
> https://github.com/apple/swift/pull/1267 for an example.
>
> Dmitri
>
> --
> main(i,j){for(i=2;;i++){for(j=2;j<i;j++){if(!(i%j)){j=0;break;}}if
> (j){printf("%d\n",i);}}} /*Dmitri Gribenko <gribozavr at gmail.com>*/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/44f85679/attachment.html>

From jordan_rose at apple.com  Mon Feb 22 16:50:10 2016
From: jordan_rose at apple.com (Jordan Rose)
Date: Mon, 22 Feb 2016 14:50:10 -0800
Subject: [swift-users] [announce] Mailing lists down (postmortem)
Message-ID: <8F4BFC2C-04BB-40DD-AEA1-0D1F8485C19C@apple.com>

Hi, all. Today we botched some infrastructure work on the mailing list server and lost all messages from around 12:00 to 2:30 PST. If you were sending messages to any of the lists (particularly discussions on swift-evolution), please re-send them for posterity.

Sorry for the inconvience!
Jordan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/67023c82/attachment.html>

From ramakrishna.malli at gmail.com  Mon Feb 22 19:49:52 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Tue, 23 Feb 2016 07:19:52 +0530
Subject: [swift-users] libswift frontend ios
In-Reply-To: <B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
	<B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
Message-ID: <CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>

Hi Joe,

I am not looking to build the llvm back-end, I am only looking to build
front-ends to generate llvm IR on iOS.

have build the swift-llvm & swift-clang static libraries for iOS using
cmake,
now I am looking to build the swift front-end for iOS,  do you have any
instructions that makes my job easier going forward.

Thanks
Ramakrishna

On Mon, Feb 22, 2016 at 11:20 PM, Joe Groff <jgroff at apple.com> wrote:

> On Feb 22, 2016, at 4:29 AM, Ramakrishna Mallireddy via swift-users <
> swift-users at swift.org> wrote:
>
>
> HI,
>
> How can I compile the swift front-end for iOS.
> the build-script mentioned only Swift Standard Library for iOS.
>
> I have read the build-script-impl, it does have the iOS build flags, but
> are they only for building the standard library  or am I missing something.
>
>
> That's right, the build script only builds the runtime libraries for iOS,
> not the compiler itself. We don't build or test the compiler on iOS since
> that's not normally useful for Xcode development.
>
> -Joe
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/0c276d61/attachment.html>

From jgroff at apple.com  Mon Feb 22 19:53:39 2016
From: jgroff at apple.com (Joe Groff)
Date: Mon, 22 Feb 2016 17:53:39 -0800
Subject: [swift-users] libswift frontend ios
In-Reply-To: <CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
	<B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
	<CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>
Message-ID: <948BA6D0-08DC-4DD0-9BA7-3CEBBBD02735@apple.com>


> On Feb 22, 2016, at 5:49 PM, Ramakrishna Mallireddy <ramakrishna.malli at gmail.com> wrote:
> 
> Hi Joe, 
> 
> I am not looking to build the llvm back-end, I am only looking to build front-ends to generate llvm IR on iOS.
> 
> have build the swift-llvm & swift-clang static libraries for iOS using cmake, 
> now I am looking to build the swift front-end for iOS,  do you have any instructions that makes my job easier going forward.

We don't build any of the compiler for iOS, either the backend or frontend. I'd start by adding targets to the build system for the compiler's libraries (libswiftAST, libswiftSema, etc.) targeting iOS and seeing what breaks.

-Joe

> Thanks
> Ramakrishna 
> 
> On Mon, Feb 22, 2016 at 11:20 PM, Joe Groff <jgroff at apple.com <mailto:jgroff at apple.com>> wrote:
> On Feb 22, 2016, at 4:29 AM, Ramakrishna Mallireddy via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote:
>> 
>> HI,
>> 
>> How can I compile the swift front-end for iOS.
>> the build-script mentioned only Swift Standard Library for iOS.
>> 
>> I have read the build-script-impl, it does have the iOS build flags, but are they only for building the standard library  or am I missing something.
> 
> That's right, the build script only builds the runtime libraries for iOS, not the compiler itself. We don't build or test the compiler on iOS since that's not normally useful for Xcode development.
> 
> -Joe
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160222/cd2aa78c/attachment.html>

From jasonpepas at gmail.com  Tue Feb 23 01:25:48 2016
From: jasonpepas at gmail.com (Jason Pepas)
Date: Tue, 23 Feb 2016 01:25:48 -0600
Subject: [swift-users] Linux/armv5tel
Message-ID: <CALuDM+D_ZnwFcype-at9NYLCVHPZQCBCa+gOyzzdh3KSTkyJYA@mail.gmail.com>

Hi,

I'm attempting to build Swift for armv5tel (a Pogoplug) running Debian Jessie.

I'm building against Apple's 2016/2/8 snapshots, and LLVM fails on the
first file:

++ cmake_config_opt llvm
++ product=llvm
++ [[ Ninja == \X\c\o\d\e ]]
+ /usr/bin/cmake --build
/root/swift-build-scripts/build/buildbot_linux/llvm-linux-armv5 -- -j1
all
[1/1963] Building CXX object
lib/Support/CMakeFiles/LLVMSupport.dir/ThreadPool.cpp.o
FAILED: /usr/bin/clang++   -DGTEST_HAS_RTTI=0 -D_DEBUG -D_GNU_SOURCE
-D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS
-fno-stack-protector -fPIC -fvisibility-inlines-hidden -Wall -W
-Wno-unused-parameter -Wwrite-strings -Wcast-qual
-Wmissing-field-initializers -pedantic -Wno-long-long
-Wcovered-switch-default -Wnon-virtual-dtor -Wdelete-non-virtual-dtor
-std=c++11 -fcolor-diagnostics -ffunction-sections -fdata-sections -O3
 -Ilib/Support -I/root/swift-build-scripts/llvm/lib/Support -Iinclude
-I/root/swift-build-scripts/llvm/include    -UNDEBUG  -fno-exceptions
-fno-rtti -MMD -MT
lib/Support/CMakeFiles/LLVMSupport.dir/ThreadPool.cpp.o -MF
lib/Support/CMakeFiles/LLVMSupport.dir/ThreadPool.cpp.o.d -o
lib/Support/CMakeFiles/LLVMSupport.dir/ThreadPool.cpp.o -c
/root/swift-build-scripts/llvm/lib/Support/ThreadPool.cpp
In file included from
/root/swift-build-scripts/llvm/lib/Support/ThreadPool.cpp:14:
/root/swift-build-scripts/llvm/include/llvm/Support/ThreadPool.h:77:37:
error: implicit instantiation of undefined template
'std::shared_future<void>'
  inline std::shared_future<VoidTy> async(Function &&F, Args &&... ArgList) {
                                    ^
/usr/bin/../lib/gcc/arm-linux-gnueabi/4.9/../../../../include/c++/4.9/future:117:11:
note: template is declared here
    class shared_future;
          ^


Has anyone else run into something similar?  Any ideas?

Thanks,
Jason Pepas

From gribozavr at gmail.com  Tue Feb 23 01:30:21 2016
From: gribozavr at gmail.com (Dmitri Gribenko)
Date: Mon, 22 Feb 2016 23:30:21 -0800
Subject: [swift-users] Linux/armv5tel
In-Reply-To: <CALuDM+D_ZnwFcype-at9NYLCVHPZQCBCa+gOyzzdh3KSTkyJYA@mail.gmail.com>
References: <CALuDM+D_ZnwFcype-at9NYLCVHPZQCBCa+gOyzzdh3KSTkyJYA@mail.gmail.com>
Message-ID: <CA+Y5xYc6UioBf1bPSeUtbvSpROxHU_i44Aq-waY0=epO6=zgUA@mail.gmail.com>

On Mon, Feb 22, 2016 at 11:25 PM, Jason Pepas via swift-users
<swift-users at swift.org> wrote:
> Hi,
>
> I'm attempting to build Swift for armv5tel (a Pogoplug) running Debian Jessie.

If you're doing a native build, it won't finish successfully.  Your
32-bit device won't have enough virtual address space to finish
linking the binaries.  I would recommend cross-compiling.  There's a
PR in flight: https://github.com/apple/swift/pull/1398/files

> /usr/bin/../lib/gcc/arm-linux-gnueabi/4.9/../../../../include/c++/4.9/future:117:11:
> note: template is declared here
>     class shared_future;
>           ^

Although I haven't seen this error, it is possible that we are missing
some includes.

Dmitri

-- 
main(i,j){for(i=2;;i++){for(j=2;j<i;j++){if(!(i%j)){j=0;break;}}if
(j){printf("%d\n",i);}}} /*Dmitri Gribenko <gribozavr at gmail.com>*/

From jasonpepas at gmail.com  Tue Feb 23 09:10:17 2016
From: jasonpepas at gmail.com (jasonpepas at gmail.com)
Date: Tue, 23 Feb 2016 09:10:17 -0600
Subject: [swift-users] Linux/armv5tel
In-Reply-To: <CA+Y5xYc6UioBf1bPSeUtbvSpROxHU_i44Aq-waY0=epO6=zgUA@mail.gmail.com>
References: <CALuDM+D_ZnwFcype-at9NYLCVHPZQCBCa+gOyzzdh3KSTkyJYA@mail.gmail.com>
	<CA+Y5xYc6UioBf1bPSeUtbvSpROxHU_i44Aq-waY0=epO6=zgUA@mail.gmail.com>
Message-ID: <9C1DA5AA-D4F4-44D3-8BAD-2544FAD0CEE9@gmail.com>

Thanks for the tip!

Sent from my iPhone

> On Feb 23, 2016, at 1:30 AM, Dmitri Gribenko <gribozavr at gmail.com> wrote:
> 
> On Mon, Feb 22, 2016 at 11:25 PM, Jason Pepas via swift-users
> <swift-users at swift.org> wrote:
>> Hi,
>> 
>> I'm attempting to build Swift for armv5tel (a Pogoplug) running Debian Jessie.
> 
> If you're doing a native build, it won't finish successfully.  Your
> 32-bit device won't have enough virtual address space to finish
> linking the binaries.  I would recommend cross-compiling.  There's a
> PR in flight: https://github.com/apple/swift/pull/1398/files
> 
>> /usr/bin/../lib/gcc/arm-linux-gnueabi/4.9/../../../../include/c++/4.9/future:117:11:
>> note: template is declared here
>>    class shared_future;
>>          ^
> 
> Although I haven't seen this error, it is possible that we are missing
> some includes.
> 
> Dmitri
> 
> -- 
> main(i,j){for(i=2;;i++){for(j=2;j<i;j++){if(!(i%j)){j=0;break;}}if
> (j){printf("%d\n",i);}}} /*Dmitri Gribenko <gribozavr at gmail.com>*/

From radu.v.valentin at icloud.com  Mon Feb 22 17:17:15 2016
From: radu.v.valentin at icloud.com (Valentin Radu)
Date: Tue, 23 Feb 2016 01:17:15 +0200
Subject: [swift-users] The nil coalescing operator
Message-ID: <0FE4C1AA-BDC5-4A60-A35A-3CAD0903B00E@icloud.com>

Hello all,


I have a question re the nil coalescing operator. Shouldn’t 

print ("This machine's ip is \(result["ip"] ?? “unknown")”) 

return This machine's ip is 78.97.202.31 ? Since the value is always String, not String?.  However, it still surrounds the ip with Optional(). 

So I’m using, (result.0["ip"] ?? "nil").description but is long and dirty. Any thoughts? 

Cheers!
– V
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/70e51942/attachment.html>

From outgoing at stepan.technology  Tue Feb 23 09:40:37 2016
From: outgoing at stepan.technology (Stepan Hruda)
Date: Tue, 23 Feb 2016 10:40:37 -0500
Subject: [swift-users] swiftpm linking problems
Message-ID: <etPan.56cc7d75.6944862c.128@Stepans-MacBook-Pro-3532.local>

Hello, I am having linking problems when using swiftpm, and I have burned enough time into this that I could use a nudge.

Sample reproduction:

I run swift build —init and swift build -v -Xcc -v. Here is the output:

https://gist.github.com/stepanhruda/53b6e3412160d5480fcb

This seems like the simplest configuration that should work, but swiftpm cannot find any of the swift symbols. I have tried reinstalling the entire toolchain and switching xcode-select to both Xcode 7.2 and the latest 7.3 beta. Any help would be appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/1ea6dff2/attachment.html>

From jordan_rose at apple.com  Tue Feb 23 11:09:29 2016
From: jordan_rose at apple.com (Jordan Rose)
Date: Tue, 23 Feb 2016 09:09:29 -0800
Subject: [swift-users] The nil coalescing operator
In-Reply-To: <0FE4C1AA-BDC5-4A60-A35A-3CAD0903B00E@icloud.com>
References: <0FE4C1AA-BDC5-4A60-A35A-3CAD0903B00E@icloud.com>
Message-ID: <8C69671A-83CB-4407-93E2-778D3D1004C4@apple.com>

That does seem like a bug, but one possibility is that 'result' has type 'AnyObject', and so you're getting an extra level of optional due to the subscript operator possibly not being there. Do you have a full, self-contained test case?

Jordan

> On Feb 22, 2016, at 15:17 , Valentin Radu via swift-users <swift-users at swift.org> wrote:
> 
> Hello all,
> 
> 
> I have a question re the nil coalescing operator. Shouldn’t 
> 
> print ("This machine's ip is \(result["ip"] ?? “unknown")”) 
> 
> return This machine's ip is 78.97.202.31 ? Since the value is always String, not String?.  However, it still surrounds the ip with Optional(). 
> 
> So I’m using, (result.0["ip"] ?? "nil").description but is long and dirty. Any thoughts? 
> 
> Cheers!
> – V
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/fc53ab20/attachment.html>

From coding at marcofeltmann.de  Tue Feb 23 11:37:16 2016
From: coding at marcofeltmann.de (Marco Feltmann)
Date: Tue, 23 Feb 2016 18:37:16 +0100
Subject: [swift-users] Build multiple executable targets
Message-ID: <20160223173716.GA2062@B116M.Speedport_W_724V_Typ_A_05011603_00_007>

Hi everyone,

I'd like to play around with Open Source Swift on Arch Linux.
I've been an Mac OS X developer for almost a decade now and an iOS developer for a long time and I was distracted by the Swift-Cocoa-Integration, so I'm gladly willing to give pure Swift a try.

Unfortunately I'm unable to get a XCTestCase executed and running.

According to the Swift Build System documentation my subdirectory `test` is ignored by the build system.
According to the XCTest Library documentation I need to generate an own testing executable that has to be run manually.

That's good news and I was able to implement the documented XCTMain() into my `main.swift` and executing worked.
But it isn't the best idea to remove the real executable for the sake of a testing executable.
Both should exist side-by-side, especially in TDD.

How can I create multiple executable targets, so a `swift build` will generate both `Executable` and `ExecutableTests` for me?

I could wait for the `swift test` command in Swift 3.0, but I'd like to start right away with 2.2-dev.

Oh, and I really want to use Linux for this. Xcode works fine for me, but I'm not willing to swift-up my Mac.

Cheers
Marco

From dturnbull at gmail.com  Tue Feb 23 12:11:57 2016
From: dturnbull at gmail.com (David Turnbull)
Date: Tue, 23 Feb 2016 10:11:57 -0800
Subject: [swift-users] Learning OpenGL with Swift
Message-ID: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>

There's many tutorials for learning OpenGL with C++, and at least one for
learning OpenGL with Objective-C, but I couldn't find more than a few small
blog posts about OpenGL with Swift. So I fixed that for you.

http://swiftgl.org/

The first few tutorials are done. It will to take a very long time to
finish the rest. But it's ready for feedback and I'm going to need some
encouragement to continue.

In addition, the SwiftGL libraries have been split apart. While they were
always meant to work together, none of them depended on each other.
Specifically, this addresses software that uses Apple libraries but also
wants to use enhanced syntax of the SwiftGL Loader.

-david  http://swiftgl.org/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/a38fa91a/attachment.html>

From ramakrishna.malli at gmail.com  Tue Feb 23 14:06:28 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Wed, 24 Feb 2016 01:36:28 +0530
Subject: [swift-users] libswift frontend ios
In-Reply-To: <948BA6D0-08DC-4DD0-9BA7-3CEBBBD02735@apple.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
	<B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
	<CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>
	<948BA6D0-08DC-4DD0-9BA7-3CEBBBD02735@apple.com>
Message-ID: <CA+mxoxcfbFFAGU1ocL9cbQWQwbK6dt5c5bxK7Jp8mRkifDcpvw@mail.gmail.com>

While trying to build for iOS, I am stuck here...I am using the
build-script to compile, iOS simulator builds are done and for arm all libs
are generate except libSwiftIRGen.a, libSwiftSILOptimizer &
libSwiftImmediate.a

*swift/swift/lib/Immediate/REPL.cpp:39:10: **fatal error: **'histedit.h'
file not found*

#include <histedit.h>

this file is not there for iOS, how to get around this.

On Tue, Feb 23, 2016 at 7:23 AM, Joe Groff <jgroff at apple.com> wrote:

>
> On Feb 22, 2016, at 5:49 PM, Ramakrishna Mallireddy <
> ramakrishna.malli at gmail.com> wrote:
>
> Hi Joe,
>
> I am not looking to build the llvm back-end, I am only looking to build
> front-ends to generate llvm IR on iOS.
>
> have build the swift-llvm & swift-clang static libraries for iOS using
> cmake,
> now I am looking to build the swift front-end for iOS,  do you have any
> instructions that makes my job easier going forward.
>
>
> We don't build any of the compiler for iOS, either the backend or
> frontend. I'd start by adding targets to the build system for the
> compiler's libraries (libswiftAST, libswiftSema, etc.) targeting iOS and
> seeing what breaks.
>
> -Joe
>
> Thanks
> Ramakrishna
>
> On Mon, Feb 22, 2016 at 11:20 PM, Joe Groff <jgroff at apple.com> wrote:
>
>> On Feb 22, 2016, at 4:29 AM, Ramakrishna Mallireddy via swift-users <
>> swift-users at swift.org> wrote:
>>
>>
>> HI,
>>
>> How can I compile the swift front-end for iOS.
>> the build-script mentioned only Swift Standard Library for iOS.
>>
>> I have read the build-script-impl, it does have the iOS build flags, but
>> are they only for building the standard library  or am I missing something.
>>
>>
>> That's right, the build script only builds the runtime libraries for iOS,
>> not the compiler itself. We don't build or test the compiler on iOS since
>> that's not normally useful for Xcode development.
>>
>> -Joe
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/15023026/attachment.html>

From jgroff at apple.com  Tue Feb 23 14:09:25 2016
From: jgroff at apple.com (Joe Groff)
Date: Tue, 23 Feb 2016 12:09:25 -0800
Subject: [swift-users] libswift frontend ios
In-Reply-To: <CA+mxoxcfbFFAGU1ocL9cbQWQwbK6dt5c5bxK7Jp8mRkifDcpvw@mail.gmail.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
	<B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
	<CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>
	<948BA6D0-08DC-4DD0-9BA7-3CEBBBD02735@apple.com>
	<CA+mxoxcfbFFAGU1ocL9cbQWQwbK6dt5c5bxK7Jp8mRkifDcpvw@mail.gmail.com>
Message-ID: <55571741-5D3D-4EEE-ABA5-D2FF5E305C08@apple.com>


> On Feb 23, 2016, at 12:06 PM, Ramakrishna Mallireddy <ramakrishna.malli at gmail.com> wrote:
> 
> While trying to build for iOS, I am stuck here...I am using the build-script to compile, iOS simulator builds are done and for arm all libs are generate except libSwiftIRGen.a, libSwiftSILOptimizer & libSwiftImmediate.a
> 
> swift/swift/lib/Immediate/REPL.cpp:39:10: fatal error: 'histedit.h' file not found
> 
> #include <histedit.h>
> 
> this file is not there for iOS, how to get around this.
> 

libedit probably isn't available on iOS, but it's only used by the compiler-debugging REPL. You can refine the #if here to exclude it from iOS builds:

#if defined(__APPLE__) || defined(__FreeBSD__)
// FIXME: Support REPL on non-Apple platforms. Ubuntu 14.10's editline does not
// include the wide character entry points needed by the REPL yet.
#include <histedit.h>
#endif // __APPLE__

Instead of defined(__APPLE__), defined(__MACOSX__) is probably more appropriate.

-Joe
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/d5c70450/attachment.html>

From ramakrishna.malli at gmail.com  Tue Feb 23 14:22:58 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Wed, 24 Feb 2016 01:52:58 +0530
Subject: [swift-users] libswift frontend ios
In-Reply-To: <55571741-5D3D-4EEE-ABA5-D2FF5E305C08@apple.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
	<B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
	<CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>
	<948BA6D0-08DC-4DD0-9BA7-3CEBBBD02735@apple.com>
	<CA+mxoxcfbFFAGU1ocL9cbQWQwbK6dt5c5bxK7Jp8mRkifDcpvw@mail.gmail.com>
	<55571741-5D3D-4EEE-ABA5-D2FF5E305C08@apple.com>
Message-ID: <CA+mxoxcJSX50aMgPeQoQViNWUsDWxGb+CA1mVMwDUoejoTvQjg@mail.gmail.com>

I am using the build-script that comes with swift repository. If i remove
Immediate dir completely from the build, mac_os build complains[as this
will always invoke]. If I redefine the #if then I am getting a dozen errors
that are part of histedit.h

How can I tell ninja, that not to worry about this change[i will completely
remove Immediate dir] and go straight to build the arm build.

On Wed, Feb 24, 2016 at 1:39 AM, Joe Groff <jgroff at apple.com> wrote:

>
> On Feb 23, 2016, at 12:06 PM, Ramakrishna Mallireddy <
> ramakrishna.malli at gmail.com> wrote:
>
> While trying to build for iOS, I am stuck here...I am using the
> build-script to compile, iOS simulator builds are done and for arm all libs
> are generate except libSwiftIRGen.a, libSwiftSILOptimizer &
> libSwiftImmediate.a
>
> *swift/swift/lib/Immediate/REPL.cpp:39:10: **fatal error: **'histedit.h'
> file not found*
>
> #include <histedit.h>
>
> this file is not there for iOS, how to get around this.
>
> libedit probably isn't available on iOS, but it's only used by the
> compiler-debugging REPL. You can refine the #if here to exclude it from iOS
> builds:
>
> #if defined(__APPLE__) || defined(__FreeBSD__)
> // FIXME: Support REPL on non-Apple platforms. Ubuntu 14.10's editline
> does not
> // include the wide character entry points needed by the REPL yet.
> #include <histedit.h>
> #endif // __APPLE__
>
> Instead of defined(__APPLE__), defined(__MACOSX__) is probably more
> appropriate.
>
> -Joe
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/2b747a81/attachment.html>

From jgroff at apple.com  Tue Feb 23 14:27:16 2016
From: jgroff at apple.com (Joe Groff)
Date: Tue, 23 Feb 2016 12:27:16 -0800
Subject: [swift-users] libswift frontend ios
In-Reply-To: <CA+mxoxcJSX50aMgPeQoQViNWUsDWxGb+CA1mVMwDUoejoTvQjg@mail.gmail.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
	<B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
	<CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>
	<948BA6D0-08DC-4DD0-9BA7-3CEBBBD02735@apple.com>
	<CA+mxoxcfbFFAGU1ocL9cbQWQwbK6dt5c5bxK7Jp8mRkifDcpvw@mail.gmail.com>
	<55571741-5D3D-4EEE-ABA5-D2FF5E305C08@apple.com>
	<CA+mxoxcJSX50aMgPeQoQViNWUsDWxGb+CA1mVMwDUoejoTvQjg@mail.gmail.com>
Message-ID: <F412D3BC-1CF7-4E76-B9BB-F15295D1FF45@apple.com>


> On Feb 23, 2016, at 12:22 PM, Ramakrishna Mallireddy <ramakrishna.malli at gmail.com> wrote:
> 
> I am using the build-script that comes with swift repository. If i remove Immediate dir completely from the build, mac_os build complains[as this will always invoke]. If I redefine the #if then I am getting a dozen errors that are part of histedit.h

You will need to update the other #if __APPLE__ conditions in the file to match too.

-Joe


From ramakrishna.malli at gmail.com  Tue Feb 23 14:42:28 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Wed, 24 Feb 2016 02:12:28 +0530
Subject: [swift-users] libswift frontend ios
In-Reply-To: <F412D3BC-1CF7-4E76-B9BB-F15295D1FF45@apple.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
	<B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
	<CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>
	<948BA6D0-08DC-4DD0-9BA7-3CEBBBD02735@apple.com>
	<CA+mxoxcfbFFAGU1ocL9cbQWQwbK6dt5c5bxK7Jp8mRkifDcpvw@mail.gmail.com>
	<55571741-5D3D-4EEE-ABA5-D2FF5E305C08@apple.com>
	<CA+mxoxcJSX50aMgPeQoQViNWUsDWxGb+CA1mVMwDUoejoTvQjg@mail.gmail.com>
	<F412D3BC-1CF7-4E76-B9BB-F15295D1FF45@apple.com>
Message-ID: <CA+mxoxfrq5J+N1TndBneYXuBQCM=sWRBeOfPbL27oCHVjtPWDA@mail.gmail.com>

__MACOSX__ is not defined, where can I defined this, so that it only
effects mac build.

On Wed, Feb 24, 2016 at 1:57 AM, Joe Groff <jgroff at apple.com> wrote:

>
> > On Feb 23, 2016, at 12:22 PM, Ramakrishna Mallireddy <
> ramakrishna.malli at gmail.com> wrote:
> >
> > I am using the build-script that comes with swift repository. If i
> remove Immediate dir completely from the build, mac_os build complains[as
> this will always invoke]. If I redefine the #if then I am getting a dozen
> errors that are part of histedit.h
>
> You will need to update the other #if __APPLE__ conditions in the file to
> match too.
>
> -Joe
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/77a78fe3/attachment.html>

From coding at marcofeltmann.de  Tue Feb 23 15:00:13 2016
From: coding at marcofeltmann.de (Marco Feltmann)
Date: Tue, 23 Feb 2016 22:00:13 +0100
Subject: [swift-users] Learning OpenGL with Swift
In-Reply-To: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
References: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
Message-ID: <20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>

Hey David,

I really appreciate this idea!

Unfortunately when I try to build the `Hello Window` tutorial Linux
tells me the linker couldn't find -lglfw3 although I installed it
properly.

Well, since I'm on Linux I modified the Package.swift and removed the
Dependency Adding stuff since I only need the CGLFW3Linux.git

I have no clue where this linking is done so I'm unable to optimize the
`3` out of the linking. My distribution does only support GLFW3 and has
no support for GLFW2, so maybe they simply renamed it?

If you could point me to the right direction I'd like to dig deeper into
your tutorials.

Cheers
Marco

From jgroff at apple.com  Tue Feb 23 15:03:25 2016
From: jgroff at apple.com (Joe Groff)
Date: Tue, 23 Feb 2016 13:03:25 -0800
Subject: [swift-users] libswift frontend ios
In-Reply-To: <CA+mxoxfrq5J+N1TndBneYXuBQCM=sWRBeOfPbL27oCHVjtPWDA@mail.gmail.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
	<B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
	<CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>
	<948BA6D0-08DC-4DD0-9BA7-3CEBBBD02735@apple.com>
	<CA+mxoxcfbFFAGU1ocL9cbQWQwbK6dt5c5bxK7Jp8mRkifDcpvw@mail.gmail.com>
	<55571741-5D3D-4EEE-ABA5-D2FF5E305C08@apple.com>
	<CA+mxoxcJSX50aMgPeQoQViNWUsDWxGb+CA1mVMwDUoejoTvQjg@mail.gmail.com>
	<F412D3BC-1CF7-4E76-B9BB-F15295D1FF45@apple.com>
	<CA+mxoxfrq5J+N1TndBneYXuBQCM=sWRBeOfPbL27oCHVjtPWDA@mail.gmail.com>
Message-ID: <0CD54990-3032-481F-A586-89638894401F@apple.com>

Sorry, it looks like the magic combination is 

#if defined(__APPLE__)
#include <TargetConditionals.h>
#endif

#if (TARGET_OS_MAC && !TARGET_OS_IPHONE) || defined(__FreeBSD__)
...do REPL stuff...
#endif

-Joe

> On Feb 23, 2016, at 12:42 PM, Ramakrishna Mallireddy <ramakrishna.malli at gmail.com> wrote:
> 
> __MACOSX__ is not defined, where can I defined this, so that it only effects mac build.
> 
> On Wed, Feb 24, 2016 at 1:57 AM, Joe Groff <jgroff at apple.com <mailto:jgroff at apple.com>> wrote:
> 
> > On Feb 23, 2016, at 12:22 PM, Ramakrishna Mallireddy <ramakrishna.malli at gmail.com <mailto:ramakrishna.malli at gmail.com>> wrote:
> >
> > I am using the build-script that comes with swift repository. If i remove Immediate dir completely from the build, mac_os build complains[as this will always invoke]. If I redefine the #if then I am getting a dozen errors that are part of histedit.h
> 
> You will need to update the other #if __APPLE__ conditions in the file to match too.
> 
> -Joe
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/37ed4e98/attachment.html>

From dturnbull at gmail.com  Tue Feb 23 15:43:32 2016
From: dturnbull at gmail.com (David Turnbull)
Date: Tue, 23 Feb 2016 13:43:32 -0800
Subject: [swift-users] Learning OpenGL with Swift
In-Reply-To: <20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
References: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
	<20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
Message-ID: <CANEjtCAX8=8EakcuKn1goBa615ydw5ZJZu7=wHgoP-SGKX5jgg@mail.gmail.com>

Marco,

I test that Ubuntu 14 can build the project. Beyond that I plan to depend
on feedback like yours to smooth out Linux.

Check out the modulemap for the Linux GLFW. What you need to fix is likely
in there. Honestly, I built it with trial and error.

https://github.com/SwiftGL/CGLFW3Linux/blob/master/module.modulemap

If you get it working, please let me know what Linux you are using and send
me the code. (github ticket, email, carrier pigeon, whatever).

I looked for something with less friction than GLFW but came up empty. It's
possible to make a pure Swift replacement, but I don't have the resources
to make that happen any time soon.

-david





On Tue, Feb 23, 2016 at 1:00 PM, Marco Feltmann <coding at marcofeltmann.de>
wrote:

> Hey David,
>
> I really appreciate this idea!
>
> Unfortunately when I try to build the `Hello Window` tutorial Linux
> tells me the linker couldn't find -lglfw3 although I installed it
> properly.
>
> Well, since I'm on Linux I modified the Package.swift and removed the
> Dependency Adding stuff since I only need the CGLFW3Linux.git
>
> I have no clue where this linking is done so I'm unable to optimize the
> `3` out of the linking. My distribution does only support GLFW3 and has
> no support for GLFW2, so maybe they simply renamed it?
>
> If you could point me to the right direction I'd like to dig deeper into
> your tutorials.
>
> Cheers
> Marco
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/4b53f557/attachment.html>

From ramakrishna.malli at gmail.com  Tue Feb 23 15:46:24 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Wed, 24 Feb 2016 03:16:24 +0530
Subject: [swift-users] libswift frontend ios
In-Reply-To: <0CD54990-3032-481F-A586-89638894401F@apple.com>
References: <CA+mxoxf5wDk0rQK1dPjC9QO+EZrzvwO8k2qufsCufes83BtjVw@mail.gmail.com>
	<B034287A-A96B-4C3C-814F-3B9D8AD9AE36@apple.com>
	<CA+mxoxeXL7if7iJZ7BMxychZh+pYBhM=XxyKq3HonZi+ng0pqA@mail.gmail.com>
	<948BA6D0-08DC-4DD0-9BA7-3CEBBBD02735@apple.com>
	<CA+mxoxcfbFFAGU1ocL9cbQWQwbK6dt5c5bxK7Jp8mRkifDcpvw@mail.gmail.com>
	<55571741-5D3D-4EEE-ABA5-D2FF5E305C08@apple.com>
	<CA+mxoxcJSX50aMgPeQoQViNWUsDWxGb+CA1mVMwDUoejoTvQjg@mail.gmail.com>
	<F412D3BC-1CF7-4E76-B9BB-F15295D1FF45@apple.com>
	<CA+mxoxfrq5J+N1TndBneYXuBQCM=sWRBeOfPbL27oCHVjtPWDA@mail.gmail.com>
	<0CD54990-3032-481F-A586-89638894401F@apple.com>
Message-ID: <CA+mxoxdaKWv3mN7fA6NRv8LNOEw4032MEvCvsgXtu+jaWA_F1g@mail.gmail.com>

Thanks Joe, The build is complete.

On Wed, Feb 24, 2016 at 2:33 AM, Joe Groff <jgroff at apple.com> wrote:

> Sorry, it looks like the magic combination is
>
> #if defined(__APPLE__)
> #include <TargetConditionals.h>
> #endif
>
> #if (TARGET_OS_MAC && !TARGET_OS_IPHONE) || defined(__FreeBSD__)
> ...do REPL stuff...
> #endif
>
> -Joe
>
> On Feb 23, 2016, at 12:42 PM, Ramakrishna Mallireddy <
> ramakrishna.malli at gmail.com> wrote:
>
> __MACOSX__ is not defined, where can I defined this, so that it only
> effects mac build.
>
> On Wed, Feb 24, 2016 at 1:57 AM, Joe Groff <jgroff at apple.com> wrote:
>
>>
>> > On Feb 23, 2016, at 12:22 PM, Ramakrishna Mallireddy <
>> ramakrishna.malli at gmail.com> wrote:
>> >
>> > I am using the build-script that comes with swift repository. If i
>> remove Immediate dir completely from the build, mac_os build complains[as
>> this will always invoke]. If I redefine the #if then I am getting a dozen
>> errors that are part of histedit.h
>>
>> You will need to update the other #if __APPLE__ conditions in the file to
>> match too.
>>
>> -Joe
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/aae5827f/attachment.html>

From stephen.celis at gmail.com  Tue Feb 23 15:51:08 2016
From: stephen.celis at gmail.com (Stephen Celis)
Date: Tue, 23 Feb 2016 16:51:08 -0500
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <CAHA8a-rKMgKHsKSaJQ9SmNzaWDscr_neRih_psJpocvydyW3Pg@mail.gmail.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
	<E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
	<5209EAD0-D5EB-4C0C-ACA0-5F727F699254@apple.com>
	<5EAFB02E-B9A8-4F26-AC82-5B8DCB697294@gmail.com>
	<CAHA8a-rKMgKHsKSaJQ9SmNzaWDscr_neRih_psJpocvydyW3Pg@mail.gmail.com>
Message-ID: <0B00FF6C-B833-4B14-BD79-1E64F4D6E203@gmail.com>

> On Feb 23, 2016, at 4:35 PM, Fabio Kaminski <fabiokaminski at gmail.com> wrote:
> 
> Looking at the definition in the header file, it looks that it doesnt
> declare any export definition for the functions like:
> 
> __attribute__((__visibility__("default")))
> 
> So maybe it would only work via static linking?
> 
> Im working in something here where theres a binding for a dinamic
> library, and given is a dynamic linking
> theres o way the swift runtime will "see" the symbols without it.
[snip]
>>   ~ $ nm -g /usr/local/opt/llvm/lib/libLLVMCore.a | grep LLVMGetGlobalContext
>>   0000000000000081 T _LLVMGetGlobalContext

Thanks for the reply! The `-g` flag on `nm` should only print out external symbols, so I unfortunately don't think that's it :/

I have a feeling there's a very basic linker issue I'm overlooking.

Stephen

From max.howell at apple.com  Tue Feb 23 17:19:30 2016
From: max.howell at apple.com (Max Howell)
Date: Tue, 23 Feb 2016 15:19:30 -0800
Subject: [swift-users] Build multiple executable targets
In-Reply-To: <20160223173716.GA2062@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
References: <20160223173716.GA2062@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
Message-ID: <5A692F53-266E-4544-92DF-3EEBD19812F5@apple.com>

> Hi everyone,
> 
> I'd like to play around with Open Source Swift on Arch Linux.
> I've been an Mac OS X developer for almost a decade now and an iOS developer for a long time and I was distracted by the Swift-Cocoa-Integration, so I'm gladly willing to give pure Swift a try.
> 
> Unfortunately I'm unable to get a XCTestCase executed and running.
> 
> According to the Swift Build System documentation my subdirectory `test` is ignored by the build system.
> According to the XCTest Library documentation I need to generate an own testing executable that has to be run manually.
> 
> That's good news and I was able to implement the documented XCTMain() into my `main.swift` and executing worked.
> But it isn't the best idea to remove the real executable for the sake of a testing executable.
> Both should exist side-by-side, especially in TDD.
> 
> How can I create multiple executable targets, so a `swift build` will generate both `Executable` and `ExecutableTests` for me?
> 
> I could wait for the `swift test` command in Swift 3.0, but I'd like to start right away with 2.2-dev.
> 
> Oh, and I really want to use Linux for this. Xcode works fine for me, but I'm not willing to swift-up my Mac.

I suggest waiting for the next development snapshot which will have `swift test` integrated.

From max.howell at apple.com  Tue Feb 23 17:22:43 2016
From: max.howell at apple.com (Max Howell)
Date: Tue, 23 Feb 2016 15:22:43 -0800
Subject: [swift-users] swiftpm linking problems
In-Reply-To: <etPan.56cc7d75.6944862c.128@Stepans-MacBook-Pro-3532.local>
References: <etPan.56cc7d75.6944862c.128@Stepans-MacBook-Pro-3532.local>
Message-ID: <EF0CCED9-155B-4432-8005-9AC9FFA9558A@apple.com>

> Hello, I am having linking problems when using swiftpm, and I have burned enough time into this that I could use a nudge.
> 
> Sample reproduction:
> 
> I run swift build —init and swift build -v -Xcc -v. Here is the output:
> 
> https://gist.github.com/stepanhruda/53b6e3412160d5480fcb <https://gist.github.com/stepanhruda/53b6e3412160d5480fcb>
> This seems like the simplest configuration that should work, but swiftpm cannot find any of the swift symbols. I have tried reinstalling the entire toolchain and switching xcode-select to both Xcode 7.2 and the latest 7.3 beta. Any help would be appreciated.
> 
For some reason your installation of Swift is not linking its own standard library.

We have a number of tickets open for this, here’s one:

    https://bugs.swift.org/browse/SR-151

So far we have not been able to diagnose what is wrong, please chime in on the ticket, include as much information as possible, especially the OS X version, your Xcode version(s) and how you installed the Swift toolchain.

Sorry and thanks.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/458f51e8/attachment.html>

From gparker at apple.com  Tue Feb 23 17:43:45 2016
From: gparker at apple.com (Greg Parker)
Date: Tue, 23 Feb 2016 15:43:45 -0800
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
	<E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
Message-ID: <E675FFB2-428E-409D-AE45-3481CCF6786B@apple.com>


> On Feb 22, 2016, at 7:44 AM, Stephen Celis via swift-users <swift-users at swift.org> wrote:
> 
> Hi all,
> 
> I've also been having trouble getting a Swift interface to LLVM's C API. The basic gist is here:
> 
> https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3 <https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3>
> 
> I've:
> 
> - Installed LLVM via homebrew, so it lives in "/usr/local/opt/llvm" (I've also built LLVM myself and have the same ).
> - Passed "-I" and "-L" to send includes/lib paths to the "-Xcc" and "-Xlinker" flags. (Can a module map or package be configured directly with these paths? Or do all dependent projects need to use these flags, as well?
> - Added many more LLVM headers/links to the module map and continued to have the same issue.
> 
> The linker's still having trouble. I'm probably missing something very basic.

Did you forget to actually link to libLLVMCore? I see your -L flags in that build log, but I don't see anything like `-Xlinker -lLLVMCore`. 


-- 
Greg Parker     gparker at apple.com     Runtime Wrangler


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/e48ef22b/attachment.html>

From gparker at apple.com  Tue Feb 23 17:45:27 2016
From: gparker at apple.com (Greg Parker)
Date: Tue, 23 Feb 2016 15:45:27 -0800
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <0B00FF6C-B833-4B14-BD79-1E64F4D6E203@gmail.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
	<E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
	<5209EAD0-D5EB-4C0C-ACA0-5F727F699254@apple.com>
	<5EAFB02E-B9A8-4F26-AC82-5B8DCB697294@gmail.com>
	<CAHA8a-rKMgKHsKSaJQ9SmNzaWDscr_neRih_psJpocvydyW3Pg@mail.gmail.com>
	<0B00FF6C-B833-4B14-BD79-1E64F4D6E203@gmail.com>
Message-ID: <FA06FC98-EE2D-47EF-A4B6-C486EC3E3FD9@apple.com>


> On Feb 23, 2016, at 1:51 PM, Stephen Celis via swift-users <swift-users at swift.org> wrote:
> 
>> On Feb 23, 2016, at 4:35 PM, Fabio Kaminski <fabiokaminski at gmail.com> wrote:
>> 
>> Looking at the definition in the header file, it looks that it doesnt
>> declare any export definition for the functions like:
>> 
>> __attribute__((__visibility__("default")))
>> 
>> So maybe it would only work via static linking?
>> 
>> Im working in something here where theres a binding for a dinamic
>> library, and given is a dynamic linking
>> theres o way the swift runtime will "see" the symbols without it.
> [snip]
>>>  ~ $ nm -g /usr/local/opt/llvm/lib/libLLVMCore.a | grep LLVMGetGlobalContext
>>>  0000000000000081 T _LLVMGetGlobalContext
> 
> Thanks for the reply! The `-g` flag on `nm` should only print out external symbols, so I unfortunately don't think that's it :/

Use `nm -m` to get a readable description of symbol attributes like visibility. In this case "T" is an exported symbol in the __TEXT segment so visibility should not be a problem. If the symbol were not exported then it would be labeled "t".


-- 
Greg Parker     gparker at apple.com     Runtime Wrangler



From luzvioleta at zoho.com  Tue Feb 23 18:03:42 2016
From: luzvioleta at zoho.com (Luz Violeta)
Date: Tue, 23 Feb 2016 21:03:42 -0300
Subject: [swift-users] Learning OpenGL with Swift
In-Reply-To: <20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
References: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
	<20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
Message-ID: <56CCF35E.2070406@zoho.com>

In my case, I've solved it by making a swift build and then editing the 
recently downloaded file (Packages/CGLFW3Linux-1.0.0/module.modulemap). 
Changing out the link statement from glfw3 to glfw.

TBH, I think there should be a way to specify fallbacks for a link 
declaration to tackle these awkward moments where lack of standarization 
across distros comes to bite at compile time (or even, across release 
versions). Like, try X and if it doesn't exist try Y and so on (grabbing 
whatever matchs first)

Otherwise, it's gonna be rough using stuff from the swift ecosystem and 
editing modulemaps and writing instruction for users to do that.

Hugs.

On 02/23/2016 06:00 PM, Marco Feltmann via swift-users wrote:
> Hey David,
>
> I really appreciate this idea!
>
> Unfortunately when I try to build the `Hello Window` tutorial Linux
> tells me the linker couldn't find -lglfw3 although I installed it
> properly.
>
> Well, since I'm on Linux I modified the Package.swift and removed the
> Dependency Adding stuff since I only need the CGLFW3Linux.git
>
> I have no clue where this linking is done so I'm unable to optimize the
> `3` out of the linking. My distribution does only support GLFW3 and has
> no support for GLFW2, so maybe they simply renamed it?
>
> If you could point me to the right direction I'd like to dig deeper into
> your tutorials.
>
> Cheers
> Marco
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users



From stephen.celis at gmail.com  Tue Feb 23 19:20:25 2016
From: stephen.celis at gmail.com (Stephen Celis)
Date: Tue, 23 Feb 2016 20:20:25 -0500
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <E675FFB2-428E-409D-AE45-3481CCF6786B@apple.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
	<E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
	<E675FFB2-428E-409D-AE45-3481CCF6786B@apple.com>
Message-ID: <31E185F1-E206-4122-947B-CF28E00D1998@gmail.com>

> On Feb 23, 2016, at 6:43 PM, Greg Parker <gparker at apple.com> wrote:
> 
> Did you forget to actually link to libLLVMCore? I see your -L flags in that build log, but I don't see anything like `-Xlinker -lLLVMCore`. 

Huh. I was under the impression that the module map "link" declaration was applied. Is that not the case? Should it be? Should I file a bug?

I seem to be making headway, though this means my Swift target becomes even more problematic for dependent projects to use (with a rapidly growing Makefile).

> Use `nm -m` to get a readable description of symbol attributes like visibility. In this case "T" is an exported symbol in the __TEXT segment so visibility should not be a problem. If the symbol were not exported then it would be labeled "t".


Ah, much nicer. Thanks for the tip!

Stephen

From tanadeau at gmail.com  Tue Feb 23 20:17:05 2016
From: tanadeau at gmail.com (Trent Nadeau)
Date: Tue, 23 Feb 2016 21:17:05 -0500
Subject: [swift-users] statically link the standard library on Linux
In-Reply-To: <7CA51DFD-9029-4C8D-8C8F-56609EA6B110@apple.com>
References: <8CC7D567-4F07-4A2C-B248-D9A4D346C138@sealedabstract.com>
	<81CF48D3-5280-453C-B780-DE3FAE848FAB@apple.com>
	<385D6686-7E00-4A2C-85B6-D42F82E7E682@apple.com>
	<F9B63EAC-DE2F-4C9E-857A-D0B77DEC02B9@apple.com>
	<63BB7CA8-E0AC-4412-A05E-1B52E3AA5952@apple.com>
	<40A581A8-DFFE-4A1D-8929-71E5CDEF4635@apple.com>
	<7CA51DFD-9029-4C8D-8C8F-56609EA6B110@apple.com>
Message-ID: <CAA+bWKVMO8CgZxnRjp34QFmUBKdiC2u6BBvXSsmqT-Huo_KSVg@mail.gmail.com>

The --exclude-libs linker option does exactly that.

On Fri, Feb 19, 2016 at 4:08 PM, Joe Groff via swift-users <
swift-users at swift.org> wrote:

>
> > On Feb 19, 2016, at 1:06 PM, Max Howell <max.howell at apple.com> wrote:
> >
> >>>> Static vs dynamic building of libraries may also have an interesting
> impact on the build system, particularly in how we set visibility for
> emitted symbols. For executables and dylibs, our current mapping of access
> control to visibility and linkage makes sense:
> >>>>
> >>>> - public has default visibility,
> >>>> - internal has hidden visibility
> (__attribute__((visibility("hidden"))) in Clang),
> >>>> - private has private linkage (like 'static' in C).
> >>>>
> >>>> However, when statically linking a library into another executable or
> dylib, the static library's public symbols in most cases probably ought to
> become hidden in the final target, unless the dylib or executable
> explicitly reexports the static library's module somehow.
> >>>
> >>> I’ve worried about such things, but my conclusions were there weren’t
> any practically compelling reasons to worry about it too much.
> >>>
> >>> My reasoning being: when writing a Swift file the compiler won’t give
> you access to those symbols unless you `import` that module, in which case
> you want them.
> >>>
> >>> Unless there is something I’m missing?
> >>
> >> Maybe not huge problems, but it's a secrecy violation and unwanted ABI
> liability, and also limits LTO-level optimization opportunities since
> exported functions have to preserve their existence and calling convention.
> >
> > Makes sense, can we solve it? Our current direction is certainly one of:
> stuff all the (library) modules into a single linkage unit, be that a
> single dylib, a static library or a framework.
>
> If the frontend knows it's building for a static library, it could
> conceivably set the correct visibility contingent on that flag. There may
> also be ld flags to suppress exporting symbols from particular .o and .a
> files post-hoc.
>
> -Joe
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users
>



-- 
Trent Nadeau
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160223/072960e5/attachment.html>

From jgroff at apple.com  Tue Feb 23 22:51:13 2016
From: jgroff at apple.com (Joe Groff)
Date: Tue, 23 Feb 2016 20:51:13 -0800
Subject: [swift-users] statically link the standard library on Linux
In-Reply-To: <CAA+bWKVMO8CgZxnRjp34QFmUBKdiC2u6BBvXSsmqT-Huo_KSVg@mail.gmail.com>
References: <8CC7D567-4F07-4A2C-B248-D9A4D346C138@sealedabstract.com>
	<81CF48D3-5280-453C-B780-DE3FAE848FAB@apple.com>
	<385D6686-7E00-4A2C-85B6-D42F82E7E682@apple.com>
	<F9B63EAC-DE2F-4C9E-857A-D0B77DEC02B9@apple.com>
	<63BB7CA8-E0AC-4412-A05E-1B52E3AA5952@apple.com>
	<40A581A8-DFFE-4A1D-8929-71E5CDEF4635@apple.com>
	<7CA51DFD-9029-4C8D-8C8F-56609EA6B110@apple.com>
	<CAA+bWKVMO8CgZxnRjp34QFmUBKdiC2u6BBvXSsmqT-Huo_KSVg@mail.gmail.com>
Message-ID: <AD3583B4-11A3-489C-A884-1C3994252D9C@apple.com>


> On Feb 23, 2016, at 6:17 PM, Trent Nadeau <tanadeau at gmail.com> wrote:
> 
> The --exclude-libs linker option does exactly that.

Good to know. I didn't immediately see an equivalent option in Darwin's ld, though.

-Joe

From ccw.thomas at gmail.com  Tue Feb 23 23:19:57 2016
From: ccw.thomas at gmail.com (Thomas# Chiang)
Date: Wed, 24 Feb 2016 13:19:57 +0800
Subject: [swift-users] while case and if case usage
Message-ID: <CAAUeF2c7_GSZcMxSWuU0Wbt3SQAj-FECNL0QwpYUvGLBqYpXzg@mail.gmail.com>

have any document explain about "while case" and "if case" ? thank you ~

TMS#
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/b679ee03/attachment.html>

From ramakrishna.malli at gmail.com  Wed Feb 24 00:26:40 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Wed, 24 Feb 2016 11:56:40 +0530
Subject: [swift-users] while case and if case usage
In-Reply-To: <CAAUeF2c7_GSZcMxSWuU0Wbt3SQAj-FECNL0QwpYUvGLBqYpXzg@mail.gmail.com>
References: <CAAUeF2c7_GSZcMxSWuU0Wbt3SQAj-FECNL0QwpYUvGLBqYpXzg@mail.gmail.com>
Message-ID: <CA+mxoxeBQVcSukJL-i5_OBznsDOKwoM-HKe-r1R4XkfM+tkgMw@mail.gmail.com>

I am not sure if this helps, This is how I understand it.

what happens when you use normal switch.

switch someEnumExpression {
 case someEnum.Element1: execute block / statements
 default: executeDefault
}

// it checks each case with someEnumExpression, and if true then run it,
may be actual implementation might use dictionary with someEnum as Key
if case someEnum.Element1 == someEnumExpression {
  execute block / statements
} else {
  executeDefault
}

unroll your switch to if's, then I am sure you will understand its
construct...but why swift provide this control branch statements with case,
because at time I am sure that or only want to check an expression is of
particular enum case, then I use the if case like above. while is similar.

I am sorry if my explanation is vague.


On Wed, Feb 24, 2016 at 10:49 AM, Thomas# Chiang via swift-users <
swift-users at swift.org> wrote:

> have any document explain about "while case" and "if case" ? thank you ~
>
> TMS#
>
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/f551b97f/attachment.html>

From ramakrishna.malli at gmail.com  Wed Feb 24 01:21:01 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Wed, 24 Feb 2016 12:51:01 +0530
Subject: [swift-users] while case and if case usage
In-Reply-To: <CA+mxoxeBQVcSukJL-i5_OBznsDOKwoM-HKe-r1R4XkfM+tkgMw@mail.gmail.com>
References: <CAAUeF2c7_GSZcMxSWuU0Wbt3SQAj-FECNL0QwpYUvGLBqYpXzg@mail.gmail.com>
	<CA+mxoxeBQVcSukJL-i5_OBznsDOKwoM-HKe-r1R4XkfM+tkgMw@mail.gmail.com>
Message-ID: <CA+mxoxff7L-2Uv17+MJdR3hnB5J2pjsDiXpSNiuuqccgQHdx2g@mail.gmail.com>

I find the swift grammar at the end of Swift Book very useful. This is the
first time I have read a programming language grammar and I really felt why
I haven't done this for my earlier programming languages. For couple of
months I have just read the Language guide about using general constructs
of swift language, but after reading the grammar and implemented a lexer &
scanner(i.e parser, still in development) in swift my understanding of
swift syntax is very good.

Initially it was difficult to understand some parts of the grammar and its
terminology as it was mostly used in compiler development. but apple really
made it easy as there are no left recursive terminals.
Hence forth I decided to first learn the grammar along with its construct
guide for any language I am going to learn in the feature.

The Swift Programming Language book Pages: 848 & 852 explains the if and
case-condition clause syntax.

Note: ‹› stands for optional syntax.

Excerpt From: Apple Inc. “The Swift Programming Language (Swift 2.1).”
iBooks. https://itun.es/in/jEUH0.l

*If syntax:*
  “if *condition-clause* code-block ‹else-clause›”

*case-condition*: (is a condition-clause, along with others)
 "case pattern initializer ‹where-clause›"

Once you understand how to deal with the grammar, then you won't search for
language construct example or tutorials.

On Wed, Feb 24, 2016 at 11:56 AM, Ramakrishna Mallireddy <
ramakrishna.malli at gmail.com> wrote:

> I am not sure if this helps, This is how I understand it.
>
> what happens when you use normal switch.
>
> switch someEnumExpression {
>  case someEnum.Element1: execute block / statements
>  default: executeDefault
> }
>
> // it checks each case with someEnumExpression, and if true then run it,
> may be actual implementation might use dictionary with someEnum as Key
> if case someEnum.Element1 == someEnumExpression {
>   execute block / statements
> } else {
>   executeDefault
> }
>
> unroll your switch to if's, then I am sure you will understand its
> construct...but why swift provide this control branch statements with case,
> because at time I am sure that or only want to check an expression is of
> particular enum case, then I use the if case like above. while is similar.
>
> I am sorry if my explanation is vague.
>
>
> On Wed, Feb 24, 2016 at 10:49 AM, Thomas# Chiang via swift-users <
> swift-users at swift.org> wrote:
>
>> have any document explain about "while case" and "if case" ? thank you ~
>>
>> TMS#
>>
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org
>> https://lists.swift.org/mailman/listinfo/swift-users
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/b91b99b3/attachment.html>

From ramakrishna.malli at gmail.com  Wed Feb 24 01:58:21 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Wed, 24 Feb 2016 13:28:21 +0530
Subject: [swift-users] while case and if case usage
In-Reply-To: <CA+mxoxff7L-2Uv17+MJdR3hnB5J2pjsDiXpSNiuuqccgQHdx2g@mail.gmail.com>
References: <CAAUeF2c7_GSZcMxSWuU0Wbt3SQAj-FECNL0QwpYUvGLBqYpXzg@mail.gmail.com>
	<CA+mxoxeBQVcSukJL-i5_OBznsDOKwoM-HKe-r1R4XkfM+tkgMw@mail.gmail.com>
	<CA+mxoxff7L-2Uv17+MJdR3hnB5J2pjsDiXpSNiuuqccgQHdx2g@mail.gmail.com>
Message-ID: <CA+mxoxfh4YOoDe4aoWnaGd_NRY2RBUxFeS_4xaAKYU1MbUnXTA@mail.gmail.com>

An example for illustration:

enum Test {

  case None

  case Integer(Int)

  case StringValue(String)

  case Addition(Int, Int)

}

func test(a:Test) {



  switch a {

  case .None: print(a)

  case .Integer(let value) where value > 50: print(value)

  case .StringValue: print(a)

  case .Addition(let operands): print(operands.0 + operands.1)

  default: print(a)

  }



  if case .None = a {

    print(a)

  }



  if case .Integer = a {

    print(a)

  }



  if case .Integer(let value) = a where value > 50 {

    print(value)

  }



  if case .Addition(let operands) = a  {

    print(operands.0 + operands.1)

  }



  if case .StringValue = a {

    print(a)

  }

}


test(Test.StringValue("Hello")) // StringValue("Hello")

test(Test.Integer(70)) // 70 & Integer(70) & 70

test(Test.Addition(10, -20)) // -10 & -10

On Wed, Feb 24, 2016 at 12:51 PM, Ramakrishna Mallireddy <
ramakrishna.malli at gmail.com> wrote:

> I find the swift grammar at the end of Swift Book very useful. This is the
> first time I have read a programming language grammar and I really felt why
> I haven't done this for my earlier programming languages. For couple of
> months I have just read the Language guide about using general constructs
> of swift language, but after reading the grammar and implemented a lexer &
> scanner(i.e parser, still in development) in swift my understanding of
> swift syntax is very good.
>
> Initially it was difficult to understand some parts of the grammar and its
> terminology as it was mostly used in compiler development. but apple really
> made it easy as there are no left recursive terminals.
> Hence forth I decided to first learn the grammar along with its construct
> guide for any language I am going to learn in the feature.
>
> The Swift Programming Language book Pages: 848 & 852 explains the if and
> case-condition clause syntax.
>
> Note: ‹› stands for optional syntax.
>
> Excerpt From: Apple Inc. “The Swift Programming Language (Swift 2.1).”
> iBooks. https://itun.es/in/jEUH0.l
>
> *If syntax:*
>   “if *condition-clause* code-block ‹else-clause›”
>
> *case-condition*: (is a condition-clause, along with others)
>  "case pattern initializer ‹where-clause›"
>
> Once you understand how to deal with the grammar, then you won't search
> for language construct example or tutorials.
>
> On Wed, Feb 24, 2016 at 11:56 AM, Ramakrishna Mallireddy <
> ramakrishna.malli at gmail.com> wrote:
>
>> I am not sure if this helps, This is how I understand it.
>>
>> what happens when you use normal switch.
>>
>> switch someEnumExpression {
>>  case someEnum.Element1: execute block / statements
>>  default: executeDefault
>> }
>>
>> // it checks each case with someEnumExpression, and if true then run it,
>> may be actual implementation might use dictionary with someEnum as Key
>> if case someEnum.Element1 == someEnumExpression {
>>   execute block / statements
>> } else {
>>   executeDefault
>> }
>>
>> unroll your switch to if's, then I am sure you will understand its
>> construct...but why swift provide this control branch statements with case,
>> because at time I am sure that or only want to check an expression is of
>> particular enum case, then I use the if case like above. while is similar.
>>
>> I am sorry if my explanation is vague.
>>
>>
>> On Wed, Feb 24, 2016 at 10:49 AM, Thomas# Chiang via swift-users <
>> swift-users at swift.org> wrote:
>>
>>> have any document explain about "while case" and "if case" ? thank you ~
>>>
>>> TMS#
>>>
>>> _______________________________________________
>>> swift-users mailing list
>>> swift-users at swift.org
>>> https://lists.swift.org/mailman/listinfo/swift-users
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/a9fdc504/attachment.html>

From salutis at me.com  Wed Feb 24 07:37:43 2016
From: salutis at me.com (=?utf-8?Q?Rudolf_Adamkovi=C4=8D?=)
Date: Wed, 24 Feb 2016 14:37:43 +0100
Subject: [swift-users] Nil coalescing operator and closures
Message-ID: <A5A6DE8D-0B13-4DF8-922B-BA8121223040@me.com>

Hello there!

Today, I stumbled upon the following error:

typealias ClosureType = () -> Void
        
let closure: ClosureType?
let otherClosure: ClosureType = {}
        
let pickClosure = closure ?? otherClosure
// ERROR: binary operator '??' cannot be applied to operands of type 'ClosureType?' and 'ClosureType' (aka '() -> ()')

Is this a bug or a feature?

Thanks!

Rudolf Adamkovic
R+

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/bc74fbac/attachment.html>

From davesweeris at mac.com  Wed Feb 24 08:11:39 2016
From: davesweeris at mac.com (davesweeris at mac.com)
Date: Wed, 24 Feb 2016 08:11:39 -0600
Subject: [swift-users] Nil coalescing operator and closures
In-Reply-To: <A5A6DE8D-0B13-4DF8-922B-BA8121223040@me.com>
References: <A5A6DE8D-0B13-4DF8-922B-BA8121223040@me.com>
Message-ID: <D74FF0C1-3CEE-4DA2-8A22-5B3C6820C61D@mac.com>

Assuming you've merely omitted the code where you set closure to something and aren’t trying to read a variable before initializing it, I believe it's a bug... Using the "explicit" version works fine:
let closure: Closure? = nil
let otherClosure: Closure = {}
let pickClosure = closure != nil ? closure! : otherClosure

- Dave Sweeris

> On Feb 24, 2016, at 7:37 AM, Rudolf Adamkovič via swift-users <swift-users at swift.org> wrote:
> 
> Hello there!
> 
> Today, I stumbled upon the following error:
> 
> typealias ClosureType = () -> Void
>         
> let closure: ClosureType?
> let otherClosure: ClosureType = {}
>         
> let pickClosure = closure ?? otherClosure
> // ERROR: binary operator '??' cannot be applied to operands of type 'ClosureType?' and 'ClosureType' (aka '() -> ()')
> 
> Is this a bug or a feature?
> 
> Thanks!
> 
> Rudolf Adamkovic
> R+
> 
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/af4d24c3/attachment.html>

From jgroff at apple.com  Wed Feb 24 11:54:12 2016
From: jgroff at apple.com (Joe Groff)
Date: Wed, 24 Feb 2016 09:54:12 -0800
Subject: [swift-users] Nil coalescing operator and closures
In-Reply-To: <A5A6DE8D-0B13-4DF8-922B-BA8121223040@me.com>
References: <A5A6DE8D-0B13-4DF8-922B-BA8121223040@me.com>
Message-ID: <D20F6191-278B-4447-A1B2-A935DCD27DC0@apple.com>


> On Feb 24, 2016, at 5:37 AM, Rudolf Adamkovič via swift-users <swift-users at swift.org> wrote:
> 
> Hello there!
> 
> Today, I stumbled upon the following error:
> 
> typealias ClosureType = () -> Void
>         
> let closure: ClosureType?
> let otherClosure: ClosureType = {}
>         
> let pickClosure = closure ?? otherClosure
> // ERROR: binary operator '??' cannot be applied to operands of type 'ClosureType?' and 'ClosureType' (aka '() -> ()')
> 
> Is this a bug or a feature?

It's a known bug.

-Joe

> 
> Thanks!
> 
> Rudolf Adamkovic
> R+
> 
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/0900c6fc/attachment.html>

From salutis at me.com  Wed Feb 24 13:49:42 2016
From: salutis at me.com (Rudolf Adamkovic)
Date: Wed, 24 Feb 2016 20:49:42 +0100
Subject: [swift-users] Nil coalescing operator and closures
In-Reply-To: <D20F6191-278B-4447-A1B2-A935DCD27DC0@apple.com>
References: <A5A6DE8D-0B13-4DF8-922B-BA8121223040@me.com>
	<D20F6191-278B-4447-A1B2-A935DCD27DC0@apple.com>
Message-ID: <F5AD7F3A-078C-4016-85B2-7A4FBAD67680@me.com>

Thanks for letting me know!

R+

Sent from my iPhone

> On 24 Feb 2016, at 18:54, Joe Groff <jgroff at apple.com> wrote:
> 
> 
>> On Feb 24, 2016, at 5:37 AM, Rudolf Adamkovič via swift-users <swift-users at swift.org> wrote:
>> 
>> Hello there!
>> 
>> Today, I stumbled upon the following error:
>> 
>> typealias ClosureType = () -> Void
>>         
>> let closure: ClosureType?
>> let otherClosure: ClosureType = {}
>>         
>> let pickClosure = closure ?? otherClosure
>> // ERROR: binary operator '??' cannot be applied to operands of type 'ClosureType?' and 'ClosureType' (aka '() -> ()')
>> 
>> Is this a bug or a feature?
> 
> It's a known bug.
> 
> -Joe
> 
>> 
>> Thanks!
>> 
>> Rudolf Adamkovic
>> R+
>> 
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org
>> https://lists.swift.org/mailman/listinfo/swift-users
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/15f5cf00/attachment.html>

From coding at marcofeltmann.de  Wed Feb 24 15:59:21 2016
From: coding at marcofeltmann.de (Marco Feltmann)
Date: Wed, 24 Feb 2016 22:59:21 +0100
Subject: [swift-users] Learning OpenGL with Swift
In-Reply-To: <56CCF35E.2070406@zoho.com>
References: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
	<20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
	<56CCF35E.2070406@zoho.com>
Message-ID: <20160224215921.GB1624@B116M.Speedport_W_724V_Typ_A_05011603_00_007>

On Tue, Feb 23, 2016 at 09:03:42PM -0300, Luz Violeta via swift-users wrote:
> In my case, I've solved it by making a swift build and then editing the
> recently downloaded file (Packages/CGLFW3Linux-1.0.0/module.modulemap).
> Changing out the link statement from glfw3 to glfw. 
Perfect, thank you! :)
Changed, `swift build --clean; swift build`, works.

Now I'm ready to fly.

> Like, try X and if it doesn't exist try Y and so on (grabbing
> whatever matchs first)
I have no clue how to realize that kind of logic.
There is a `link` command in the modulemap, but a `link if exists`
doesn't sound like it is implemented now. 

> Otherwise, it's gonna be rough using stuff from the swift ecosystem and
> editing modulemaps and writing instruction for users to do that.
As long as you point the Swift users to the direction where they can
tweak this behaviour this feels fine for me.

But when providing OSS this really is a no-go.
At least on Linux this whole ./configure; make; make install; stuff was
created to wrestle down these distribution-depending things.

From stephen.celis at gmail.com  Wed Feb 24 20:03:34 2016
From: stephen.celis at gmail.com (Stephen Celis)
Date: Wed, 24 Feb 2016 21:03:34 -0500
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <CAHA8a-oEuWWr8ApJZjka1pQNJNWeHvNnTbhZ3M7JXTO8-fmAng@mail.gmail.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
	<E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
	<5209EAD0-D5EB-4C0C-ACA0-5F727F699254@apple.com>
	<5EAFB02E-B9A8-4F26-AC82-5B8DCB697294@gmail.com>
	<CAHA8a-rKMgKHsKSaJQ9SmNzaWDscr_neRih_psJpocvydyW3Pg@mail.gmail.com>
	<0B00FF6C-B833-4B14-BD79-1E64F4D6E203@gmail.com>
	<CAHA8a-oEuWWr8ApJZjka1pQNJNWeHvNnTbhZ3M7JXTO8-fmAng@mail.gmail.com>
Message-ID: <DF160309-5686-4470-B5AC-6B442B8B40EA@gmail.com>

Thanks for following up :)

> On Feb 24, 2016, at 8:46 PM, Fabio Kaminski <fabiokaminski at gmail.com> wrote:
> 
> 1 - For me at least the "link" directive works only for shared libs,
> and given you are looking into the symbols of the .a file and not the
> .dylib or .so, that its probably what the modulemap will try to link
> against?

Ah, interesting! Is there a reason for this limitation? Could a bug be filed for a swiftpm enhancement that automatically adds `-l` flags for whatever is included as a `link` in the module map?

> I think the [extern_c] directive maybe is the magic sauce that will
> try to link the symbols using the correct mangling technique "_" ?

Unfortunately [extern_c] doesn't seem to have any effect on linking, though it appears to be the correct attribute according to http://clang.llvm.org/docs/Modules.html#module-declaration <http://clang.llvm.org/docs/Modules.html#module-declaration>. I was able to fix the problem, though, with this Makefile in my dependent project:

https://gist.github.com/stephencelis/7f76f8d26a1df64ee3ff#file-llvm_makefile-mak <https://gist.github.com/stephencelis/7f76f8d26a1df64ee3ff#file-llvm_makefile-mak>

It's an unfortunate limitation. Requiring dependent projects to set certain `-Xcc` and `-Xlinker` flags makes the parent CLLVM dependency a lot less easy to use. I'm not sure if there have been evolution, bug, or internal discussions around this, though. At least I'm unblocked in the meantime. Thanks again!

--
Stephen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160224/adee524f/attachment.html>

From luzvioleta at zoho.com  Wed Feb 24 23:55:12 2016
From: luzvioleta at zoho.com (Luz Violeta)
Date: Thu, 25 Feb 2016 02:55:12 -0300
Subject: [swift-users] Learning OpenGL with Swift
In-Reply-To: <20160224215921.GB1624@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
References: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
	<20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
	<56CCF35E.2070406@zoho.com>
	<20160224215921.GB1624@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
Message-ID: <56CE9740.408@zoho.com>


>> Like, try X and if it doesn't exist try Y and so on (grabbing
>> whatever matchs first)
> I have no clue how to realize that kind of logic.
> There is a `link` command in the modulemap, but a `link if exists`
> doesn't sound like it is implemented now.

It's not implemented yet, but it should. Actually, more than "link if 
exists" i was thinking of a "link this, preferably ... if it's not 
there, here's a list of alternative names of this library and link 
whatever is available first off that list"

>> Otherwise, it's gonna be rough using stuff from the swift ecosystem and
>> editing modulemaps and writing instruction for users to do that.
> As long as you point the Swift users to the direction where they can
> tweak this behaviour this feels fine for me.

Well, demanding that to a developer consuming code or worst, to a final 
user ... for me, it feels like demanding arcanery or something 
alpha-looking.

> But when providing OSS this really is a no-go.
> At least on Linux this whole ./configure; make; make install; stuff was
> created to wrestle down these distribution-depending things.

Well, I'll differ in considering autotools like a reference or standard 
when you implement a build system from scratch (which is the case of 
swift-build). At the end, it all boils down to repeating old and 
terrible designs, or making something cool (easy to set up, no forced 
fiddling to initially build and something pretty much distraction-less 
during development process ... I think a build system should aim for 
something like that, because we all benefit from something like that :D)

At my work, we're not married to any particular language and we have 
space to -judiciously- involve with new tech. Would love that to be the 
case with swift (I mainly write backend software with rust -which was a 
recent addition alongside the existing python codebase- and also code 
that does require it's share of C interop), but the whole build system 
story is the biggest deterrent at the moment (for now, swift is only 
used specifically for iOS development through xcode)

My two cents there,
Hugs.


From rbaxter85 at gmail.com  Thu Feb 25 09:54:13 2016
From: rbaxter85 at gmail.com (Ryan Baxter)
Date: Thu, 25 Feb 2016 10:54:13 -0500
Subject: [swift-users] swift binary in /usr/bin
Message-ID: <CAB56zCVJbkCWS3CLmG55cibLFwOoPdhWk8x==Z3JNaq8+f+eSw@mail.gmail.com>

Hi,

I recently installed a Swift Development snapshot of the package manager on
my system and added
/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin/swift
to my path.  However when I do 'which swift' in my terminal it points to a
binary in /usr/bin.  When I run 'swift build --help' I get '<unknown>:0:
error: no such file or directory: 'build'' so clearly it is not the right
swift binary.  I am not sure where the binary came from in /usr/bin but I
cant delete it because OSX is telling me that it is needed by the operating
system.  Has anyone encountered this before?

-Ryan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160225/e9ddabd1/attachment.html>

From jgroff at apple.com  Thu Feb 25 11:31:00 2016
From: jgroff at apple.com (Joe Groff)
Date: Thu, 25 Feb 2016 09:31:00 -0800
Subject: [swift-users] swift binary in /usr/bin
In-Reply-To: <CAB56zCVJbkCWS3CLmG55cibLFwOoPdhWk8x==Z3JNaq8+f+eSw@mail.gmail.com>
References: <CAB56zCVJbkCWS3CLmG55cibLFwOoPdhWk8x==Z3JNaq8+f+eSw@mail.gmail.com>
Message-ID: <04E50294-80DE-4967-8275-23E54B6EE235@apple.com>


> On Feb 25, 2016, at 7:54 AM, Ryan Baxter via swift-users <swift-users at swift.org> wrote:
> 
> Hi,
> 
> I recently installed a Swift Development snapshot of the package manager on my system and added /Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin/swift to my path.  However when I do 'which swift' in my terminal it points to a binary in /usr/bin.  When I run 'swift build --help' I get '<unknown>:0: error: no such file or directory: 'build'' so clearly it is not the right swift binary.  I am not sure where the binary came from in /usr/bin but I cant delete it because OSX is telling me that it is needed by the operating system.  Has anyone encountered this before?

OS X puts forwarding stubs for various developer tools into /usr/bin that launch the corresponding tools from the active Xcode or Command Line Tools installation. IIRC you're supposed to use xcode-select, or change the toolchain within Xcode itself, instead of putting the toolchain directly in your path. You can then use `xcrun swift` to run swift with the correct environment set up.

-Joe

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160225/4d9267cc/attachment.html>

From daniel_dunbar at apple.com  Thu Feb 25 11:34:53 2016
From: daniel_dunbar at apple.com (Daniel Dunbar)
Date: Thu, 25 Feb 2016 09:34:53 -0800
Subject: [swift-users] swift binary in /usr/bin
In-Reply-To: <04E50294-80DE-4967-8275-23E54B6EE235@apple.com>
References: <CAB56zCVJbkCWS3CLmG55cibLFwOoPdhWk8x==Z3JNaq8+f+eSw@mail.gmail.com>
	<04E50294-80DE-4967-8275-23E54B6EE235@apple.com>
Message-ID: <2635E03F-8987-4A00-A855-2D3D2163ED7E@apple.com>

That is correct.

Ryan, did you install the 2.2 stable snapshot? It is expected that that snapshot doesn't include the Swift package manager (swift-build). If you want it, you should install the development snapshots.

 - Daniel

> On Feb 25, 2016, at 9:31 AM, Joe Groff via swift-users <swift-users at swift.org> wrote:
> 
> 
>> On Feb 25, 2016, at 7:54 AM, Ryan Baxter via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote:
>> 
>> Hi,
>> 
>> I recently installed a Swift Development snapshot of the package manager on my system and added /Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin/swift to my path.  However when I do 'which swift' in my terminal it points to a binary in /usr/bin.  When I run 'swift build --help' I get '<unknown>:0: error: no such file or directory: 'build'' so clearly it is not the right swift binary.  I am not sure where the binary came from in /usr/bin but I cant delete it because OSX is telling me that it is needed by the operating system.  Has anyone encountered this before?
> 
> OS X puts forwarding stubs for various developer tools into /usr/bin that launch the corresponding tools from the active Xcode or Command Line Tools installation. IIRC you're supposed to use xcode-select, or change the toolchain within Xcode itself, instead of putting the toolchain directly in your path. You can then use `xcrun swift` to run swift with the correct environment set up.
> 
> -Joe
> 
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160225/e8075139/attachment.html>

From emaloney at gilt.com  Thu Feb 25 12:07:27 2016
From: emaloney at gilt.com (Evan Maloney)
Date: Thu, 25 Feb 2016 13:07:27 -0500
Subject: [swift-users] New crash possibly related to generics & ObjC
	object instantiation in Swift 2.2 betas?
In-Reply-To: <75355ECB-BC18-4B07-857B-749A207F3258@gilt.com>
References: <A03B12C0-60B5-4190-8C59-4552146F3CF6@gilt.com>
	<3DF26302-8E9C-425F-8C40-CF478A481752@apple.com>
	<75355ECB-BC18-4B07-857B-749A207F3258@gilt.com>
Message-ID: <98905AB0-9930-4A29-96AF-50C16A4A3DD5@gilt.com>

Hi Slava,

As promised, I tried to reproduce the bug below (filed as rdar://problem/24592548 <rdar://problem/24592548>) once the new Xcode beta came out.

Unfortunately, under Xcode 7.3 beta 4 (7D152p), we're still seeing the crash.

Let me know if there's more info I can provide.

Thanks,
E.


> On Feb 11, 2016, at 11:38 PM, Evan Maloney <emaloney at gilt.com> wrote:
> 
> Slava,
> 
> Thanks for the quick reply. I'm blown away at how accessible and responsive the Swift team has been on these mailing lists. Past experience has 
> 
> Anyway, we had 2 classes requiring the work-around, but once I plugged it in, the crashes went away. I'm no longer able to trigger a crash.
> 
> When the next Xcode release comes out, I'll be sure to try it again--sans work-around--and I'll let you know how it goes.
> 
> Thanks again!
> Evan
> 
> 
> 
> 
>> On Feb 11, 2016, at 9:30 PM, Slava Pestov <spestov at apple.com <mailto:spestov at apple.com>> wrote:
>> 
>> Hi Evan,
>> 
>> Sorry for the inconvenience!
>> 
>> The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.
>> 
>> In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.
>> 
>> As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:
>> 
>>     let _workaround: ViewModel? = nil
>> 
>> I tried this with the app from the radar and it appears to make it past the point where it previously crashed.
>> 
>> I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:
>> 
>> - a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime
>> - the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class
>> - Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members
>> 
>> Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).
>> 
>> Slava
>> 
>> 
>> I should have a fix ready shortly, but as a workaround, you might want to try 
>>> On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote:
>>> 
>>> Hello,
>>> 
>>> I've spent many hours banging my head against this one, and so far have come up empty. I'm wondering if anyone else is seeing the same issue.
>>> 
>>> We've been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 & 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.
>>> 
>>> We've got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.
>>> 
>>> At first, we were experiencing weird crashes during cell reuse within this view controller's collection view, so we turned on all the Diagnostic > Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn't be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.
>>> 
>>> When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It's definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:
>>> 
>>>     public var myInt = Int(3)
>>> 
>>> Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.
>>> 
>>> We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.
>>> 
>>> A couple of us have developed a hunch it's related to generics somehow, since the only place we see the problem is the one place we're using generics at the UIViewController & UICollectionViewCell level.
>>> 
>>> Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I've tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.
>>> 
>>> My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don't have a decent test case.
>>> 
>>> Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?
>>> 
>>> I'm hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.
>>> 
>>> Thanks,
>>> E.
>>> _______________________________________________
>>> swift-users mailing list
>>> swift-users at swift.org <mailto:swift-users at swift.org>
>>> https://lists.swift.org/mailman/listinfo/swift-users <https://lists.swift.org/mailman/listinfo/swift-users>
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160225/d1f2fe57/attachment.html>

From mishal_shah at apple.com  Thu Feb 25 13:19:06 2016
From: mishal_shah at apple.com (Mishal Shah)
Date: Thu, 25 Feb 2016 11:19:06 -0800
Subject: [swift-users] New Swift snapshots available!
Message-ID: <9757E7FB-6F69-416D-933A-1A9CD3F2E1C1@apple.com>

New Swift snapshot available! 

Download new packages from https://swift.org/download/ <https://swift.org/download/>


Swift 2.2: (swift-2.2-branch)
Following repository are tagged with swift-2.2-SNAPSHOT-2016-02-24-a

https://github.com/apple/swift <https://github.com/apple/swift>					
https://github.com/apple/swift-clang <https://github.com/apple/swift-clang>						
https://github.com/apple/swift-lldb <https://github.com/apple/swift-lldb>				
https://github.com/apple/swift-llvm <https://github.com/apple/swift-llvm>				
https://github.com/apple/swift-cmark <https://github.com/apple/swift-cmark>
https://github.com/apple/swift-integration-tests <https://github.com/apple/swift-integration-tests>	 


Swift Development: (master)
Following repository are tagged with swift-DEVELOPMENT-SNAPSHOT-2016-02-25-a

https://github.com/apple/swift <https://github.com/apple/swift>					
https://github.com/apple/swift-clang <https://github.com/apple/swift-clang>			
https://github.com/apple/swift-llbuild <https://github.com/apple/swift-llbuild>			
https://github.com/apple/swift-lldb <https://github.com/apple/swift-lldb>				
https://github.com/apple/swift-llvm <https://github.com/apple/swift-llvm>				
https://github.com/apple/swift-corelibs-foundation <https://github.com/apple/swift-corelibs-foundation>	
https://github.com/apple/swift-corelibs-xctest <https://github.com/apple/swift-corelibs-xctest>		
https://github.com/apple/swift-package-manager <https://github.com/apple/swift-package-manager>
https://github.com/apple/swift-cmark <https://github.com/apple/swift-cmark>
https://github.com/apple/swift-integration-tests <https://github.com/apple/swift-integration-tests>	 

Thanks, 
Mishal Shah
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160225/21508a95/attachment.html>

From dturnbull at gmail.com  Thu Feb 25 13:35:26 2016
From: dturnbull at gmail.com (David Turnbull)
Date: Thu, 25 Feb 2016 11:35:26 -0800
Subject: [swift-users] Learning OpenGL with Swift
In-Reply-To: <20160224215921.GB1624@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
References: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
	<20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
	<56CCF35E.2070406@zoho.com>
	<20160224215921.GB1624@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
Message-ID: <CANEjtCBek0Din6-TZJvp0WQ9ZTSx+V_5RnJkyziFz+zgdLbzqg@mail.gmail.com>

On Wed, Feb 24, 2016 at 1:59 PM, Marco Feltmann via swift-users <
swift-users at swift.org> wrote:

> On Tue, Feb 23, 2016 at 09:03:42PM -0300, Luz Violeta via swift-users
> wrote:
> > In my case, I've solved it by making a swift build and then editing the
> > recently downloaded file (Packages/CGLFW3Linux-1.0.0/module.modulemap).
> > Changing out the link statement from glfw3 to glfw.
> Perfect, thank you! :)
> Changed, `swift build --clean; swift build`, works.
>
> Now I'm ready to fly.
>

Renaming to drop the 3 should be filed as a bug in your distro. To
workaround this easier, I created a module with the 3 already removed. It's
documented in the tutorial too.

-david
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160225/50560f3b/attachment.html>

From spestov at apple.com  Thu Feb 25 14:23:43 2016
From: spestov at apple.com (Slava Pestov)
Date: Thu, 25 Feb 2016 12:23:43 -0800
Subject: [swift-users] New crash possibly related to generics & ObjC
 object instantiation in Swift 2.2 betas?
In-Reply-To: <98905AB0-9930-4A29-96AF-50C16A4A3DD5@gilt.com>
References: <A03B12C0-60B5-4190-8C59-4552146F3CF6@gilt.com>
	<3DF26302-8E9C-425F-8C40-CF478A481752@apple.com>
	<75355ECB-BC18-4B07-857B-749A207F3258@gilt.com>
	<98905AB0-9930-4A29-96AF-50C16A4A3DD5@gilt.com>
Message-ID: <DC5531ED-D783-40FE-9FA5-783113DAC549@apple.com>

Hi Evan,

The fix did not make it in time for beta 4 but it should be in the next seed.

Slava

> On Feb 25, 2016, at 10:07 AM, Evan Maloney <emaloney at gilt.com> wrote:
> 
> Hi Slava,
> 
> As promised, I tried to reproduce the bug below (filed as rdar://problem/24592548 <rdar://problem/24592548>) once the new Xcode beta came out.
> 
> Unfortunately, under Xcode 7.3 beta 4 (7D152p), we're still seeing the crash.
> 
> Let me know if there's more info I can provide.
> 
> Thanks,
> E.
> 
> 
>> On Feb 11, 2016, at 11:38 PM, Evan Maloney <emaloney at gilt.com <mailto:emaloney at gilt.com>> wrote:
>> 
>> Slava,
>> 
>> Thanks for the quick reply. I'm blown away at how accessible and responsive the Swift team has been on these mailing lists. Past experience has 
>> 
>> Anyway, we had 2 classes requiring the work-around, but once I plugged it in, the crashes went away. I'm no longer able to trigger a crash.
>> 
>> When the next Xcode release comes out, I'll be sure to try it again--sans work-around--and I'll let you know how it goes.
>> 
>> Thanks again!
>> Evan
>> 
>> 
>> 
>> 
>>> On Feb 11, 2016, at 9:30 PM, Slava Pestov <spestov at apple.com <mailto:spestov at apple.com>> wrote:
>>> 
>>> Hi Evan,
>>> 
>>> Sorry for the inconvenience!
>>> 
>>> The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.
>>> 
>>> In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.
>>> 
>>> As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:
>>> 
>>>     let _workaround: ViewModel? = nil
>>> 
>>> I tried this with the app from the radar and it appears to make it past the point where it previously crashed.
>>> 
>>> I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:
>>> 
>>> - a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime
>>> - the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class
>>> - Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members
>>> 
>>> Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).
>>> 
>>> Slava
>>> 
>>> 
>>> I should have a fix ready shortly, but as a workaround, you might want to try 
>>>> On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote:
>>>> 
>>>> Hello,
>>>> 
>>>> I've spent many hours banging my head against this one, and so far have come up empty. I'm wondering if anyone else is seeing the same issue.
>>>> 
>>>> We've been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 & 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.
>>>> 
>>>> We've got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.
>>>> 
>>>> At first, we were experiencing weird crashes during cell reuse within this view controller's collection view, so we turned on all the Diagnostic > Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn't be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.
>>>> 
>>>> When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It's definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:
>>>> 
>>>>     public var myInt = Int(3)
>>>> 
>>>> Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.
>>>> 
>>>> We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.
>>>> 
>>>> A couple of us have developed a hunch it's related to generics somehow, since the only place we see the problem is the one place we're using generics at the UIViewController & UICollectionViewCell level.
>>>> 
>>>> Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I've tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.
>>>> 
>>>> My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don't have a decent test case.
>>>> 
>>>> Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?
>>>> 
>>>> I'm hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.
>>>> 
>>>> Thanks,
>>>> E.
>>>> _______________________________________________
>>>> swift-users mailing list
>>>> swift-users at swift.org <mailto:swift-users at swift.org>
>>>> https://lists.swift.org/mailman/listinfo/swift-users <https://lists.swift.org/mailman/listinfo/swift-users>
>>> 
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160225/9a53b3a3/attachment.html>

From jgroff at apple.com  Thu Feb 25 15:19:17 2016
From: jgroff at apple.com (Joe Groff)
Date: Thu, 25 Feb 2016 13:19:17 -0800
Subject: [swift-users] New crash possibly related to generics & ObjC
 object instantiation in Swift 2.2 betas?
In-Reply-To: <DC5531ED-D783-40FE-9FA5-783113DAC549@apple.com>
References: <A03B12C0-60B5-4190-8C59-4552146F3CF6@gilt.com>
	<3DF26302-8E9C-425F-8C40-CF478A481752@apple.com>
	<75355ECB-BC18-4B07-857B-749A207F3258@gilt.com>
	<98905AB0-9930-4A29-96AF-50C16A4A3DD5@gilt.com>
	<DC5531ED-D783-40FE-9FA5-783113DAC549@apple.com>
Message-ID: <6ED5ECE7-5FEE-4C19-A90B-251835C8CA4A@apple.com>

The fix should also be in the new Swift 2.2 snapshots Mish just posted, if you want to give that a try.

-Joe

> On Feb 25, 2016, at 12:23 PM, Slava Pestov <spestov at apple.com> wrote:
> 
> Hi Evan,
> 
> The fix did not make it in time for beta 4 but it should be in the next seed.
> 
> Slava
> 
>> On Feb 25, 2016, at 10:07 AM, Evan Maloney <emaloney at gilt.com <mailto:emaloney at gilt.com>> wrote:
>> 
>> Hi Slava,
>> 
>> As promised, I tried to reproduce the bug below (filed as rdar://problem/24592548 <rdar://problem/24592548>) once the new Xcode beta came out.
>> 
>> Unfortunately, under Xcode 7.3 beta 4 (7D152p), we're still seeing the crash.
>> 
>> Let me know if there's more info I can provide.
>> 
>> Thanks,
>> E.
>> 
>> 
>>> On Feb 11, 2016, at 11:38 PM, Evan Maloney <emaloney at gilt.com <mailto:emaloney at gilt.com>> wrote:
>>> 
>>> Slava,
>>> 
>>> Thanks for the quick reply. I'm blown away at how accessible and responsive the Swift team has been on these mailing lists. Past experience has 
>>> 
>>> Anyway, we had 2 classes requiring the work-around, but once I plugged it in, the crashes went away. I'm no longer able to trigger a crash.
>>> 
>>> When the next Xcode release comes out, I'll be sure to try it again--sans work-around--and I'll let you know how it goes.
>>> 
>>> Thanks again!
>>> Evan
>>> 
>>> 
>>> 
>>> 
>>>> On Feb 11, 2016, at 9:30 PM, Slava Pestov <spestov at apple.com <mailto:spestov at apple.com>> wrote:
>>>> 
>>>> Hi Evan,
>>>> 
>>>> Sorry for the inconvenience!
>>>> 
>>>> The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.
>>>> 
>>>> In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.
>>>> 
>>>> As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:
>>>> 
>>>>     let _workaround: ViewModel? = nil
>>>> 
>>>> I tried this with the app from the radar and it appears to make it past the point where it previously crashed.
>>>> 
>>>> I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:
>>>> 
>>>> - a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime
>>>> - the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class
>>>> - Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members
>>>> 
>>>> Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).
>>>> 
>>>> Slava
>>>> 
>>>> 
>>>> I should have a fix ready shortly, but as a workaround, you might want to try 
>>>>> On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote:
>>>>> 
>>>>> Hello,
>>>>> 
>>>>> I've spent many hours banging my head against this one, and so far have come up empty. I'm wondering if anyone else is seeing the same issue.
>>>>> 
>>>>> We've been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 & 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.
>>>>> 
>>>>> We've got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.
>>>>> 
>>>>> At first, we were experiencing weird crashes during cell reuse within this view controller's collection view, so we turned on all the Diagnostic > Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn't be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.
>>>>> 
>>>>> When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It's definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:
>>>>> 
>>>>>     public var myInt = Int(3)
>>>>> 
>>>>> Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.
>>>>> 
>>>>> We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.
>>>>> 
>>>>> A couple of us have developed a hunch it's related to generics somehow, since the only place we see the problem is the one place we're using generics at the UIViewController & UICollectionViewCell level.
>>>>> 
>>>>> Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I've tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.
>>>>> 
>>>>> My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don't have a decent test case.
>>>>> 
>>>>> Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?
>>>>> 
>>>>> I'm hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.
>>>>> 
>>>>> Thanks,
>>>>> E.
>>>>> _______________________________________________
>>>>> swift-users mailing list
>>>>> swift-users at swift.org <mailto:swift-users at swift.org>
>>>>> https://lists.swift.org/mailman/listinfo/swift-users <https://lists.swift.org/mailman/listinfo/swift-users>
>>>> 
>>> 
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160225/fb3afe55/attachment.html>

From dturnbull at gmail.com  Thu Feb 25 17:27:40 2016
From: dturnbull at gmail.com (David Turnbull)
Date: Thu, 25 Feb 2016 15:27:40 -0800
Subject: [swift-users] Learning OpenGL with Swift
In-Reply-To: <56CE9740.408@zoho.com>
References: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
	<20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
	<56CCF35E.2070406@zoho.com>
	<20160224215921.GB1624@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
	<56CE9740.408@zoho.com>
Message-ID: <CANEjtCDaqhvZFU_2MQSe-6u13==i1FDmennCv_yOFi9UEOawsw@mail.gmail.com>

On Wed, Feb 24, 2016 at 9:55 PM, Luz Violeta via swift-users <
swift-users at swift.org> wrote:

> ... the whole build system story is the biggest deterrent at the moment
> (for now, swift is only used specifically for iOS development through xcode)
>

You should try to get your package manager issues in front of the right
people. It's possible they won't see it here with the subject line being
"OpenGL".

The snapshots released today fix the bug which was preventing SwiftGL from
working with Swift 3.0. I switched the tutorial over to 3.0. Since I'm no
longer documenting an old 2.2, it's now reasonable to use the tutorial as
an example when talking about some of the package manager changes you want.

-david
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160225/c65fc767/attachment.html>

From dabrahams at apple.com  Thu Feb 25 18:29:00 2016
From: dabrahams at apple.com (Dave Abrahams)
Date: Thu, 25 Feb 2016 16:29:00 -0800
Subject: [swift-users] Comparing POP to OOP
References: <5DA5F8F5-D645-4BF9-A0CE-1AF1DB8B3735@gmail.com>
Message-ID: <m2h9gw71rn.fsf@eno.apple.com>


on Sun Feb 14 2016, Jon Hoffman <swift-users-AT-swift.org> wrote:

> Numerous tutorials that I have seen take a very Object-Oriented
> approach to the protocol-oriented programming (POP) paradigm.  By this
> statement I mean that they tell us that with POP we should begin our
> design with the protocol rather than with the superclass as we did
> with OOP however the protocol design tends to mirror the superclass
> design of OOP.  They also tell us that we should use extensions to add
> common functionality to types that conform to a protocol as we did
> with superclasses in OOP.  While protocols and protocol extensions are
> arguably two of the most important concepts of POP these tutorials
> seem to be missing some other very important concepts.
>
> In this post I would like to compare Protocol-Oriented design to
> Object-Oriented design to highlight some of the conceptual
> differences.  You can view the blog post here:
> http://masteringswift.blogspot.com/2016/02/pop-and-oop.html
> <http://masteringswift.blogspot.com/2016/02/pop-and-oop.html>

While I agree that simply translating classes into protocols misses the
point, it seems as though your post still only deals with the
dynamically-polymorphic half of the protocol world.  I don't see any
generics in there at all, for example.  If you're really going for a
comprehensive view of POP, you need to get into that stuff too.

-- 
-Dave


From dabrahams at apple.com  Thu Feb 25 18:35:23 2016
From: dabrahams at apple.com (Dave Abrahams)
Date: Thu, 25 Feb 2016 16:35:23 -0800
Subject: [swift-users] Comparing POP to OOP
References: <5DA5F8F5-D645-4BF9-A0CE-1AF1DB8B3735@gmail.com>
	<CAEGmPg=3-KUZ4=AQAc7jcZSFdtzWFxJOPe3u2eRB=t4FA2H9zQ@mail.gmail.com>
Message-ID: <m2bn7471h0.fsf@eno.apple.com>


on Sun Feb 14 2016, zhaoxin肇鑫 <swift-users-AT-swift.org> wrote:

> I have not read your blog. But in my opinion, what Apple called protocol
> programming is actually so called functional programming. It is not object
> programming at all. It uses protocols and structs to avoid object
> programming.

I don't think most functional programmers would recognize
protocol-oriented programming as what they do.  It is true that one of
the main benefits we see in protocol-oriented programming is that it
allows one to use *mutable* value types, instead of classes, in
polymorphic contexts.  Functional programming is largely concerned with
immutable data, where the distinction between value and reference
semantics disappears, and it doesn't matter if you're using classes or
not.  But the main thing in FP is the use of higher-order functions,
which Swift enthusiastically supports, but have nothing whatever to do
with protocol-oriented programming.

>
> zhaoxin
>
> On Mon, Feb 15, 2016 at 7:59 AM, Jon Hoffman via swift-users <
> swift-users at swift.org> wrote:
>
>> Numerous tutorials that I have seen take a very Object-Oriented approach
>> to the protocol-oriented programming (POP) paradigm.  By this statement I
>> mean that they tell us that with POP we should begin our design with the
>> protocol rather than with the superclass as we did with OOP however the
>> protocol design tends to mirror the superclass design of OOP.   They also
>> tell us that we should use extensions to add common functionality to types
>> that conform to a protocol as we did with superclasses in OOP.  While
>> protocols and protocol extensions are arguably two of the most important
>> concepts of POP these tutorials seem to be missing some other very
>> important concepts.
>>
>> In this post I would like to compare Protocol-Oriented design to
>> Object-Oriented design to highlight some of the conceptual differences.
>> You can view the blog post here:
>> http://masteringswift.blogspot.com/2016/02/pop-and-oop.html
>>
>> Jon
>>
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org
>> https://lists.swift.org/mailman/listinfo/swift-users
>>
>>
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-- 
-Dave


From dabrahams at apple.com  Thu Feb 25 18:38:21 2016
From: dabrahams at apple.com (Dave Abrahams)
Date: Thu, 25 Feb 2016 16:38:21 -0800
Subject: [swift-users] Comparing POP to OOP
References: <mailman.31.1455559202.5922.swift-users@swift.org>
	<717DC113-4E48-4A94-B1A2-78C4525F9790@gmail.com>
	<BB56BB0D-6140-4455-AD80-3CAB6D20F202@gmail.com>
	<CADE-wXDcrDimUNeHOfPFXx874NxJq5xvm20G3-zVLRj4=KEnBg@mail.gmail.com>
Message-ID: <m260xc71c2.fsf@eno.apple.com>


on Mon Feb 15 2016, Jon Hoffman <swift-users-AT-swift.org> wrote:

> Thank you for the feedback however you cannot design the code as you
> describe, if I understand your explanation correctly, because one of the
> requirements is the animals may be apart of multiple categories.  As the
> example in the post shows the alligator belongs to both the Land and the
> Sea categories.  In you description that would mean that the Alligator type
> would need to be a subclass of both the Land and Sea superclasses which is
> not permitted.  Remember that one of the drawbacks with OOP is a subclass
> can only inherit from one superclass.

That's true in Swift, but not in all realizations of OOP.  If your
article is merely using protocols to get the benefits of multiple
inheritance from abstract classes, it may not touch at all on what
differentiates OOP from POP at a fundamental level.

>
> 
> Jon
>
> On Mon, Feb 15, 2016 at 1:17 PM, Daniel Tartaglia <danielt1263 at gmail.com>
> wrote:
>
>> (Reposting because I forgot to change the subject line. Hope that this is
>> the correct thing to do.)
>>
>> I have to say John that I am not a fan of your OOP code. I would have
>> written the OOP code very much like you wrote the POP version using the
>> Strategy pattern.
>>
>> [Animal]<*>--->[Mode]
>>                   ^
>>                   |
>>            +------+------+
>>            |      |      |
>>         [Land]  [Sea]  [Air]
>>
>>
>> (View the above with a mono-spaced font.)
>>
>> In essence, I see no difference. There may be a difference, but I don’t
>> think your example presents one.
>>
>> On Feb 15, 2016, at 1:00 PM, swift-users-request at swift.org wrote:
>>
>> Date: Sun, 14 Feb 2016 18:59:05 -0500
>> From: Jon Hoffman <hoffman.jon at gmail.com>
>> To: swift-users <swift-users at swift.org>
>> Subject: [swift-users] Comparing POP to OOP
>> Message-ID: <5DA5F8F5-D645-4BF9-A0CE-1AF1DB8B3735 at gmail.com>
>> Content-Type: text/plain; charset="utf-8"
>>
>> Numerous tutorials that I have seen take a very Object-Oriented approach
>> to the protocol-oriented programming (POP) paradigm.  By this statement I
>> mean that they tell us that with POP we should begin our design with the
>> protocol rather than with the superclass as we did with OOP however the
>> protocol design tends to mirror the superclass design of OOP.   They also
>> tell us that we should use extensions to add common functionality to types
>> that conform to a protocol as we did with superclasses in OOP.  While
>> protocols and protocol extensions are arguably two of the most important
>> concepts of POP these tutorials seem to be missing some other very
>> important concepts.
>>
>> In this post I would like to compare Protocol-Oriented design to
>> Object-Oriented design to highlight some of the conceptual differences.
>> You can view the blog post here:
>> http://masteringswift.blogspot.com/2016/02/pop-and-oop.html <
>> http://masteringswift.blogspot.com/2016/02/pop-and-oop.html>
>>
>> Jon
>>
>>
>>
>>
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-- 
-Dave


From dabrahams at apple.com  Thu Feb 25 20:00:14 2016
From: dabrahams at apple.com (Dave Abrahams)
Date: Thu, 25 Feb 2016 18:00:14 -0800
Subject: [swift-users] Comparing POP to OOP
References: <mailman.31.1455559202.5922.swift-users@swift.org>
	<717DC113-4E48-4A94-B1A2-78C4525F9790@gmail.com>
	<BB56BB0D-6140-4455-AD80-3CAB6D20F202@gmail.com>
	<CADE-wXDcrDimUNeHOfPFXx874NxJq5xvm20G3-zVLRj4=KEnBg@mail.gmail.com>
	<92B30A88-E3FC-44EE-B751-73583B5D36A7@gmail.com>
	<CADE-wXB+4XQhybES5ANtw_kx9Dx2otXCa6Ux34EO3mfn5Yhz6w@mail.gmail.com>
	<72DFBC29-6283-4B17-B074-00E30A7CE1DB@me.com>
	<63A9F354-13E5-4560-8190-9319605EA970@gmail.com>
	<062C6F96-0997-4688-A046-DB42A5B0B89A@gmail.com>
Message-ID: <m2vb5c5iz5.fsf@eno.apple.com>


on Tue Feb 16 2016, Daniel Tartaglia <swift-users-AT-swift.org> wrote:

> Jon,
>
> Here’s the thing… Swift protocols are exactly equivalent to OO
> interfaces. 

That's true of Objective-C protocols, but not of Swift protocols.  The
only way it can be said of Swift protocols is if you never use them with
value types and you restrict yourself to the dynamically-dispatched
subset of what they provide (i.e. no self requirements or associated
types).

> Swift protocol extensions are exactly equivalent to global functions
> that take an object of the protocol type as a parameter.
>
> The only difference is in some syntactic sugar. 

Also untrue.  A constrained protocol extension can conditionally fulfill
a protocol requirement for a whole category of conforming types.  You
can't do that with global functions (except operators, and it's a
horrible hack that we'll remove one day).

>
>> On Feb 15, 2016, at 8:13 PM, Jon Hoffman <hoffman.jon at gmail.com> wrote:
>> 
>> Please excuse my ignorance on ECS.  I did read though the link that
>> you sent and also a few other sites on ECS namely
>> https://en.wikipedia.org/wiki/Entity_component_system
>> <https://en.wikipedia.org/wiki/Entity_component_system> and
>> http://www.gamedev.net/page/resources/_/technical/game-programming/understanding-component-entity-systems-r3013
>> <http://www.gamedev.net/page/resources/_/technical/game-programming/understanding-component-entity-systems-r3013>.
>> It does appear that ECS design is a lot closer to POP then OOP based
>> on what I read however I may not fully understand ECS.
>> 
>> Lets take a couple of land animals as examples.  If we had a Lion,
>> it would attack either using it’s claws or it’s teeth.  An Alligator
>> would use it’s teeth on land.  A snake or spider would inject venom
>> into it’s victim while some snakes may also squeeze the victim to
>> death.  With ECS, I believe we would have components for each type
>> of attack.  Is that correct?  Then we would add the component that
>> we need to our entity (animal).
>> 
>> If my description is correct, then I believe this is very similar to
>> a POP design where we would use protocols to define the component
>> and protocol extensions to add the functionality.  This would mean
>> we would have the BiteAttack, ClawAttack, VenomAttack and
>> SqeezeAttack protocols with protocol extensions to add the
>> functionality.  Do I understand ECS correctly?  This type of design
>> is very good where we break all of the components down into
>> individual types.
>> 
>> One advantage to using POP to implement ECS is we would define the
>> requirements when we define the animal type.  What I mean by that is
>> we would specify what protocols the type conforms to when we define
>> the type.  This prevents developers from adding the wrong components
>> within the code.  The draw back with using POP would be the type
>> definition could get pretty long because we would need to list all
>> of the protocols that a type needs to conform to.
>> 
>> One point you made, if I understood you correctly, is that with POP
>> we would have larger types as compared to ECS however if we use
>> protocol extensions to add the functionality to our component types,
>> I do not believe our individual animals types would be much bigger
>> than the ECS ones.
>> 
>> Do I understand the ECS design correctly?
>> 
>> Jon
>> 
>>> On Feb 15, 2016, at 5:51 PM, Adam Eberbach <aeberbach at me.com <mailto:aeberbach at me.com>> wrote:
>>> 
>>> For a third approach take a look at
>>> http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/
>>> <http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/>
>>> and the following posts (5).
>>> Entity Component Systems avoid the problem of everything migrating
>>> up into the base class and the propagation of classes by separating
>>> aspects (attributes, things the entity has) of the entity into
>>> components. The entity itself is little more than a UUID handle to
>>> the components owned by that entity. In this example an alligator
>>> has a LandComponent and a SeaComponent. A System contains the code
>>> that acts on the data contained in those components and there is a
>>> system for each kind of component, for example a LandSystem that
>>> has code to make an entity move on land. Each update the System
>>> acts on every entity that has a component matching it.
>>> 
>>> The description above is the more modern AAA-game ideal of ECS but
>>> there is disagreement about the fine points (of course!). Apple’s
>>> GameplayKit implements an older form of ECS like that developed by
>>> Scott Bilas for Dungeon Siege
>>> (http://scottbilas.com/games/dungeon-siege/
>>> <http://scottbilas.com/games/dungeon-siege/>) in 2003, where
>>> components have code and data.
>>> 
>>> I think this is very like the POP idea… but perhaps cleaner since
>>> the System processes, subject to the usual sync issues, can be
>>> separate threads. Adding a behaviour or a new entity is as simple
>>> as choosing the right components, aggregating them into an entity
>>> and then adding that entity to the update loop. And it doesn’t
>>> matter how many aspects you add to a class - all the code is
>>> encapsulated in the System, all the data in the Component. The POP
>>> approach is pretty good but you still wind up with a very beefy
>>> class.
>>> 
>>>> On 16 Feb 2016, at 6:21 AM, Jon Hoffman via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote:
>>>> 
>>>> Sorry for the misunderstanding, I see what you are doing now, you are using the command pattern, however I so see quite a bit of difference between your design and my POP design.  The biggest is the number of types needed between the designs.  For example, how the Lion attacks and moves on land is different than how the Alligator attacks and moves on land therefore you will need separate attack and movement types for each type of animal.   This means that you will need a Alligator type and to go with that Alligator type you would need AlligatorLandAttack, AlligatorSeaAttack, AlligatorLandMove and AlligatorSeaMove types.  You would also need the Lion type with a LionLandAttack and LionLandMove type.  You would need these separate types for each animal you create.  With my POP all of this logic would be encapsulated in a single types.
>>>> 
>>>>  
>>>> By encapsulating all of the logic into a single type your code will be easier to manage and also less error prone.  For example, in your code there is nothing preventing a developer to accidentally adding the LionLandAttack type to the Alligator type and since that error could occur anyplace where an instance of the Alligator is created it could also be hard to track down.
>>>> 
>>>>  
>>>> One of the principles of Protocol-Oriented programming is making our code safer and easier to manage.  Your code would work but I would still say that the POP code would be much easier to manage long term and would also be less error prone.  That is my opinion and everyone will have their own.
>>>> 
>>>> 
>>>> On Mon, Feb 15, 2016 at 1:52 PM, Daniel Tartaglia <danielt1263 at gmail.com <mailto:danielt1263 at gmail.com>> wrote:
>>>> That’s easy to do by allowing an Animal to hold multiple modes. Yes, the code below uses a Protocol, but only as an OO interface.
>>>> 
>>>> let alligator = Animal()
>>>> alligator.mode.append(Land())
>>>> alligator.mode.append(Sea())
>>>> 
>>>> protocol Mode {
>>>>     func attack() -> Bool
>>>>     func move() -> Bool
>>>> }
>>>> 
>>>> class Animal {
>>>>     var modes: [Mode]
>>>>     func attack() -> Bool {
>>>>         for mode in modes {
>>>>             if mode.attack() {
>>>>                 break
>>>>             }
>>>>         }
>>>>     }
>>>> }
>>>> 
>>>> 
>>>> 
>>>>> On Feb 15, 2016, at 1:43 PM, Jon Hoffman <hoffman.jon at gmail.com <mailto:hoffman.jon at gmail.com>> wrote:
>>>>> 
>>>>> Thank you for the feedback however you cannot design the code as you describe, if I understand your explanation correctly, because one of the requirements is the animals may be apart of multiple categories.  As the example in the post shows the alligator belongs to both the Land and the Sea categories.  In you description that would mean that the Alligator type would need to be a subclass of both the Land and Sea superclasses which is not permitted.  Remember that one of the drawbacks with OOP is a subclass can only inherit from one superclass.
>>>>> 
>>>>> Jon
>>>>> 
>>>>> On Mon, Feb 15, 2016 at 1:17 PM, Daniel Tartaglia <danielt1263 at gmail.com <mailto:danielt1263 at gmail.com>> wrote:
>>>>> (Reposting because I forgot to change the subject line. Hope that this is the correct thing to do.)
>>>>> 
>>>>> I have to say John that I am not a fan of your OOP code. I would have written the OOP code very much like you wrote the POP version using the Strategy pattern.
>>>>> 
>>>>> [Animal]<*>--->[Mode]
>>>>>                   ^
>>>>>                   |
>>>>>            +------+------+
>>>>>            |      |      |
>>>>>         [Land]  [Sea]  [Air]
>>>>>      
>>>>> 
>>>>> (View the above with a mono-spaced font.)
>>>>> 
>>>>> In essence, I see no difference. There may be a difference, but I don’t think your example presents one.
>>>>> 
>>>> 
>>>> 
>>>> _______________________________________________
>>>> swift-users mailing list
>>>> swift-users at swift.org <mailto:swift-users at swift.org>
>>>> https://lists.swift.org/mailman/listinfo/swift-users <https://lists.swift.org/mailman/listinfo/swift-users>
>>> 
>> 
>
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-- 
-Dave


From dabrahams at apple.com  Thu Feb 25 20:02:27 2016
From: dabrahams at apple.com (Dave Abrahams)
Date: Thu, 25 Feb 2016 18:02:27 -0800
Subject: [swift-users] Comparing POP to OOP
References: <mailman.31.1455559202.5922.swift-users@swift.org>
	<717DC113-4E48-4A94-B1A2-78C4525F9790@gmail.com>
	<BB56BB0D-6140-4455-AD80-3CAB6D20F202@gmail.com>
	<CADE-wXDcrDimUNeHOfPFXx874NxJq5xvm20G3-zVLRj4=KEnBg@mail.gmail.com>
	<92B30A88-E3FC-44EE-B751-73583B5D36A7@gmail.com>
	<CADE-wXB+4XQhybES5ANtw_kx9Dx2otXCa6Ux34EO3mfn5Yhz6w@mail.gmail.com>
	<72DFBC29-6283-4B17-B074-00E30A7CE1DB@me.com>
	<63A9F354-13E5-4560-8190-9319605EA970@gmail.com>
	<062C6F96-0997-4688-A046-DB42A5B0B89A@gmail.com>
	<CADE-wXDAtCOVdxr_VLzstTtF_kEZWyO6_qXyxsVo5ePc_RsRGA@mail.gmail.com>
	<8436FC81-7678-4371-81BE-3E671BD8F7F8@architechies.com>
Message-ID: <m2povk5ivg.fsf@eno.apple.com>


on Tue Feb 16 2016, Brent Royal-Gordon <swift-users-AT-swift.org> wrote:

>> We can override functionality provided from a protocol extension if
> we need specific functionality for a particular type.
>
> No you can't. Protocol extension methods (that is, methods declared
> only in an extension, as opposed to default implementations, which are
> both declared in the protocol and defined in an extension) are
> statically dispatched, so calling them on the protocol witness will
> always use the extension's implementation, even if some concrete type
> conforming to the protocol has a different implementation with the
> same name and signature.
>
> (I've worked on a proposal in the past that would require keywords to
> make this behavior clearer, but I've had trouble getting it through.)
>
> In any case, I'm pretty sure that's what Daniel means when he says
> extension methods are exactly equivalent to global functions. Sure,
> they appear after a dot, have an implicit self parameter, and are
> scoped to a particular type, but there's nothing dynamic about their
> behavior—they're not overridable in any useful sense.

The difference is that they can function as overrides of requirements,
which global functions cannot (insert obligatory caveat about operator
hack here).

-- 
-Dave


From dabrahams at apple.com  Thu Feb 25 20:06:58 2016
From: dabrahams at apple.com (Dave Abrahams)
Date: Thu, 25 Feb 2016 18:06:58 -0800
Subject: [swift-users] Comparing POP to OOP
References: <mailman.31.1455559202.5922.swift-users@swift.org>
	<717DC113-4E48-4A94-B1A2-78C4525F9790@gmail.com>
	<BB56BB0D-6140-4455-AD80-3CAB6D20F202@gmail.com>
	<CADE-wXDcrDimUNeHOfPFXx874NxJq5xvm20G3-zVLRj4=KEnBg@mail.gmail.com>
	<92B30A88-E3FC-44EE-B751-73583B5D36A7@gmail.com>
	<CADE-wXB+4XQhybES5ANtw_kx9Dx2otXCa6Ux34EO3mfn5Yhz6w@mail.gmail.com>
	<72DFBC29-6283-4B17-B074-00E30A7CE1DB@me.com>
	<63A9F354-13E5-4560-8190-9319605EA970@gmail.com>
	<062C6F96-0997-4688-A046-DB42A5B0B89A@gmail.com>
	<CADE-wXDAtCOVdxr_VLzstTtF_kEZWyO6_qXyxsVo5ePc_RsRGA@mail.gmail.com>
	<8436FC81-7678-4371-81BE-3E671BD8F7F8@architechies.com>
	<5D7D318E-1A06-4AE4-AFEC-7FA65BDAE83C@gmail.com>
	<CA+Y5xYeFYJFGBGT8U5Gya0FKfTVV_fgX9FvSpB5tZVqEVkf8fA@mail.gmail.com>
Message-ID: <m2k2ls5inx.fsf@eno.apple.com>


on Tue Feb 16 2016, Dmitri Gribenko <swift-users-AT-swift.org> wrote:

> On Tue, Feb 16, 2016 at 6:28 PM, Jon Hoffman via swift-users
> <swift-users at swift.org> wrote:
>> You are correct that if you are using the protocol type to interact with the
>> instance then the method defined in the protocol extension will be called
>> however if it is type casted to a concrete type which has a method that
>> overrides the method in the protocol extension then the method in the
>> concrete type would be called.
>
> The method in the concrete type does not override the method from the
> protocol extension, it merely shadows that method.

Technically true, but not really interesting because no instances of a
protocol extension exist.  Instances of the protocol (and generic
parameters constrained thereto) do exist, and the method in the concrete
type “overrides the lack of implementation” in the protocol itself,
which otherwise would have been satisfied by the extension.
Semantically, that is indistinguishable from the extension's
implementation being a default in the protocol itself, which is
overridden.

-- 
-Dave


From dabrahams at apple.com  Thu Feb 25 20:10:29 2016
From: dabrahams at apple.com (Dave Abrahams)
Date: Thu, 25 Feb 2016 18:10:29 -0800
Subject: [swift-users] documents about standard library in swift
References: <582F6000DDED9042AEC973D735313BBC0BA341C8@SZXEMA503-MBX.china.huawei.com>
	<CA+Y5xYdp9PCq-pRzDTq02=-LRhojbRsV7AiKr5zPcVd7xGCdiw@mail.gmail.com>
Message-ID: <m2bn745ii2.fsf@eno.apple.com>


on Tue Feb 16 2016, Dmitri Gribenko <swift-users-AT-swift.org> wrote:

> On Tue, Feb 16, 2016 at 6:06 PM, Qibo via swift-users
> <swift-users at swift.org> wrote:
>> Hi，everyone,
>>
>> On this https://github.com/apple/swift,
>>
>> Documentation described
>>
>> “Another source of documentation is the standard library itself, located in
>> stdlib.
>>
>> Much of the language is actually implemented in the library (including Int),
>>
>> and the standard library gives some examples of what can be expressed
>> today.”
>>
>> Anyone knows where the stdlib documents is.
>
> Here are the sources:
> https://github.com/apple/swift/tree/master/stdlib/public/core

To be clear, the documentation being referred to is the source code of
the standard library itself, not the documents in that repository's
docs/ directory.

-- 
-Dave


From ramakrishna.malli at gmail.com  Fri Feb 26 10:49:08 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Fri, 26 Feb 2016 22:19:08 +0530
Subject: [swift-users] Swift Front-end C API
Message-ID: <CA+mxoxfayZ2-K+M5HocMZqeO86W+c=mnbtNm=22cjYHW3xwVmQ@mail.gmail.com>

Does swift-clang parse swift code too.

Thanks
Ramakrishna
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160226/7e46502d/attachment.html>

From me at michael-brown.net  Fri Feb 26 12:40:06 2016
From: me at michael-brown.net (Michael Brown)
Date: Fri, 26 Feb 2016 18:40:06 +0000
Subject: [swift-users] Swift Package Manager not creating library (.a) files
Message-ID: <BE3790B5-E35B-4465-9B87-CF7DBE3D8E1A@michael-brown.net>

Hi,

I tried using the Swift Package Manager for the first time today. I was trying to adapt a library I'm working on to support it. When I run "swift build" it builds, but there is no .a file anywhere in the .build directory tree. All I get is a .swiftmodule file.

In case I had something wrong setup in my library, I downloaded the SPM example (https://github.com/apple/example-package-playingcard <https://github.com/apple/example-package-playingcard>) and tried to build that. According to the documentation here (https://swift.org/package-manager/#example-usage <https://swift.org/package-manager/#example-usage>) this should produce a .a file in the root of the .build/debug directory. It doesn't. There is no .a file anywhere, only a .swiftmodule file. By the way, the documentation is out of date as the intermediate build .o files are now in a <modulename>.build directory, not at the root of .build.

I'm using the latest development snapshot downloaded from swift.org <http://swift.org/>.

Thanks,
- Michael.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160226/fdb80e33/attachment.html>

From max.howell at apple.com  Fri Feb 26 15:34:29 2016
From: max.howell at apple.com (Max Howell)
Date: Fri, 26 Feb 2016 13:34:29 -0800
Subject: [swift-users] Swift Package Manager not creating library (.a)
	files
In-Reply-To: <BE3790B5-E35B-4465-9B87-CF7DBE3D8E1A@michael-brown.net>
References: <BE3790B5-E35B-4465-9B87-CF7DBE3D8E1A@michael-brown.net>
Message-ID: <6853BF60-EB01-4FE1-90FC-6BED39C0CEC4@apple.com>

Yes this is by design.

You have to specify binary products if you want them since testing integration landed.

What are you trying to do?

> Hi,
> 
> I tried using the Swift Package Manager for the first time today. I was trying to adapt a library I'm working on to support it. When I run "swift build" it builds, but there is no .a file anywhere in the .build directory tree. All I get is a .swiftmodule file.
> 
> In case I had something wrong setup in my library, I downloaded the SPM example (https://github.com/apple/example-package-playingcard <https://github.com/apple/example-package-playingcard>) and tried to build that. According to the documentation here (https://swift.org/package-manager/#example-usage <https://swift.org/package-manager/#example-usage>) this should produce a .a file in the root of the .build/debug directory. It doesn't. There is no .a file anywhere, only a .swiftmodule file. By the way, the documentation is out of date as the intermediate build .o files are now in a <modulename>.build directory, not at the root of .build.
> 
> I'm using the latest development snapshot downloaded from swift.org <http://swift.org/>.
> 
> Thanks,
> - Michael.
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160226/5aca81fd/attachment.html>

From max.howell at apple.com  Fri Feb 26 15:45:34 2016
From: max.howell at apple.com (Max Howell)
Date: Fri, 26 Feb 2016 13:45:34 -0800
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <31E185F1-E206-4122-947B-CF28E00D1998@gmail.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
	<E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
	<E675FFB2-428E-409D-AE45-3481CCF6786B@apple.com>
	<31E185F1-E206-4122-947B-CF28E00D1998@gmail.com>
Message-ID: <289F8936-1AD7-4CB3-B7CE-5692C7DFC623@apple.com>

>> Did you forget to actually link to libLLVMCore? I see your -L flags in that build log, but I don't see anything like `-Xlinker -lLLVMCore`. 
> 
> Huh. I was under the impression that the module map "link" declaration was applied. Is that not the case? Should it be? Should I file a bug?

Provided that the module map file specifies link “LLVMCore” then yes, you should not need to do this. If you do, then it’s a bug.

Try running `swift build -vv` to get full instantiation information.

From max.howell at apple.com  Fri Feb 26 15:51:45 2016
From: max.howell at apple.com (Max Howell)
Date: Fri, 26 Feb 2016 13:51:45 -0800
Subject: [swift-users] Swift Package Manager: Linker Flags
In-Reply-To: <DF160309-5686-4470-B5AC-6B442B8B40EA@gmail.com>
References: <a420f299-2ea4-4719-9956-a51c328877a7@me.com>
	<A28ABE96-F617-4C55-8E12-142E4CE5F625@apple.com>
	<E62F2E1A-B500-4661-8081-7C9B25588D9D@gmail.com>
	<5209EAD0-D5EB-4C0C-ACA0-5F727F699254@apple.com>
	<5EAFB02E-B9A8-4F26-AC82-5B8DCB697294@gmail.com>
	<CAHA8a-rKMgKHsKSaJQ9SmNzaWDscr_neRih_psJpocvydyW3Pg@mail.gmail.com>
	<0B00FF6C-B833-4B14-BD79-1E64F4D6E203@gmail.com>
	<CAHA8a-oEuWWr8ApJZjka1pQNJNWeHvNnTbhZ3M7JXTO8-fmAng@mail.gmail.com>
	<DF160309-5686-4470-B5AC-6B442B8B40EA@gmail.com>
Message-ID: <E87FA993-3CD5-4C32-8682-806E45749549@apple.com>


> On Feb 24, 2016, at 6:03 PM, Stephen Celis via swift-users <swift-users at swift.org> wrote:
> 
> Thanks for following up :)
> 
>> On Feb 24, 2016, at 8:46 PM, Fabio Kaminski <fabiokaminski at gmail.com <mailto:fabiokaminski at gmail.com>> wrote:
>> 
>> 1 - For me at least the "link" directive works only for shared libs,
>> and given you are looking into the symbols of the .a file and not the
>> .dylib or .so, that its probably what the modulemap will try to link
>> against?
> 
> Ah, interesting! Is there a reason for this limitation? Could a bug be filed for a swiftpm enhancement that automatically adds `-l` flags for whatever is included as a `link` in the module map?

This is a limitation of module maps, so any improvement would have to go into clang.

>> I think the [extern_c] directive maybe is the magic sauce that will
>> try to link the symbols using the correct mangling technique "_" ?
> 
> Unfortunately [extern_c] doesn't seem to have any effect on linking, though it appears to be the correct attribute according to http://clang.llvm.org/docs/Modules.html#module-declaration <http://clang.llvm.org/docs/Modules.html#module-declaration>. I was able to fix the problem, though, with this Makefile in my dependent project:
> 
> https://gist.github.com/stephencelis/7f76f8d26a1df64ee3ff#file-llvm_makefile-mak <https://gist.github.com/stephencelis/7f76f8d26a1df64ee3ff#file-llvm_makefile-mak>
> 
> It's an unfortunate limitation. Requiring dependent projects to set certain `-Xcc` and `-Xlinker` flags makes the parent CLLVM dependency a lot less easy to use. I'm not sure if there have been evolution, bug, or internal discussions around this, though. At least I'm unblocked in the meantime. Thanks again!

-Xcc/-Xlinker are strictly work-ardoun methods so that people can make progress with swift build until we have real solutions.

Watch for my proposal to improve module map support coming to swift-evolution at some point.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160226/d46c478d/attachment.html>

From max.howell at apple.com  Fri Feb 26 15:56:15 2016
From: max.howell at apple.com (Max Howell)
Date: Fri, 26 Feb 2016 13:56:15 -0800
Subject: [swift-users] Learning OpenGL with Swift
In-Reply-To: <56CCF35E.2070406@zoho.com>
References: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
	<20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
	<56CCF35E.2070406@zoho.com>
Message-ID: <B3A7E557-6E06-4C93-B4D9-B0FCBB9168D5@apple.com>

> TBH, I think there should be a way to specify fallbacks for a link declaration to tackle these awkward moments where lack of standarization across distros comes to bite at compile time (or even, across release versions). Like, try X and if it doesn't exist try Y and so on (grabbing whatever matchs first)

We intend to improve this area.

From me at michael-brown.net  Fri Feb 26 17:24:55 2016
From: me at michael-brown.net (Michael Brown)
Date: Fri, 26 Feb 2016 23:24:55 +0000
Subject: [swift-users] Swift Package Manager not creating library (.a)
	files
In-Reply-To: <6853BF60-EB01-4FE1-90FC-6BED39C0CEC4@apple.com>
References: <BE3790B5-E35B-4465-9B87-CF7DBE3D8E1A@michael-brown.net>
	<6853BF60-EB01-4FE1-90FC-6BED39C0CEC4@apple.com>
Message-ID: <865BB842-436D-4780-92C2-0EE582641DD4@michael-brown.net>

I was trying to add SPM support to this library: https://github.com/Velhotes/Vinyl 

I wanted to make sure I had done it properly and was concerned the absence of a .a file meant I hadn't. It looks like it's ok now though. 

Sent from my iPhone.

> On 26 Feb 2016, at 21:34, Max Howell <max.howell at apple.com> wrote:
> 
> Yes this is by design.
> 
> You have to specify binary products if you want them since testing integration landed.
> 
> What are you trying to do?
> 
>> Hi,
>> 
>> I tried using the Swift Package Manager for the first time today. I was trying to adapt a library I'm working on to support it. When I run "swift build" it builds, but there is no .a file anywhere in the .build directory tree. All I get is a .swiftmodule file.
>> 
>> In case I had something wrong setup in my library, I downloaded the SPM example (https://github.com/apple/example-package-playingcard) and tried to build that. According to the documentation here (https://swift.org/package-manager/#example-usage) this should produce a .a file in the root of the .build/debug directory. It doesn't. There is no .a file anywhere, only a .swiftmodule file. By the way, the documentation is out of date as the intermediate build .o files are now in a <modulename>.build directory, not at the root of .build.
>> 
>> I'm using the latest development snapshot downloaded from swift.org.
>> 
>> Thanks,
>> - Michael.
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org
>> https://lists.swift.org/mailman/listinfo/swift-users
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160226/8d772374/attachment.html>

From max.howell at apple.com  Fri Feb 26 18:00:54 2016
From: max.howell at apple.com (Max Howell)
Date: Fri, 26 Feb 2016 16:00:54 -0800
Subject: [swift-users] Swift Package Manager not creating library (.a)
	files
In-Reply-To: <865BB842-436D-4780-92C2-0EE582641DD4@michael-brown.net>
References: <BE3790B5-E35B-4465-9B87-CF7DBE3D8E1A@michael-brown.net>
	<6853BF60-EB01-4FE1-90FC-6BED39C0CEC4@apple.com>
	<865BB842-436D-4780-92C2-0EE582641DD4@michael-brown.net>
Message-ID: <0298DD9C-BE26-44BF-9144-B7270193465A@apple.com>

> I was trying to add SPM support to this library: https://github.com/Velhotes/Vinyl <https://github.com/Velhotes/Vinyl> 
> 
> I wanted to make sure I had done it properly and was concerned the absence of a .a file meant I hadn't. It looks like it's ok now though. 

Oh ok. So, if you get the .swiftmodule in your .build/debug directory then a client package can import it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160226/2cc30c1a/attachment.html>

From swift-dev at ryan.lovelett.me  Fri Feb 26 21:17:54 2016
From: swift-dev at ryan.lovelett.me (Ryan Lovelett)
Date: Fri, 26 Feb 2016 22:17:54 -0500
Subject: [swift-users] Command failed due to signal: Illegal instruction: 4
Message-ID: <1456543074.1025456.533314210.559AA9C9@webmail.messagingengine.com>

I'm trying to compile some code that interacts with FFmpeg and for the
most part have been making progress. Until I added some AVFilter code.
Now it is failing to compile with the error: "Command failed due to
signal: Illegal instruction: 4".

The log Xcode provided of the build error is attached. All of the source
code that was used to trigger the error can be found here
(https://git.lovelett.me/castable/live) on a branch called "swift".

 Should I file a bug for this or am I doing something wrong?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: swift.log
Type: application/octet-stream
Size: 14415 bytes
Desc: not available
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160226/5c8648e6/attachment.obj>

From simonmpilkington at icloud.com  Sat Feb 27 13:21:07 2016
From: simonmpilkington at icloud.com (Simon Pilkington)
Date: Sat, 27 Feb 2016 11:21:07 -0800
Subject: [swift-users] swift binary in /usr/bin
In-Reply-To: <2635E03F-8987-4A00-A855-2D3D2163ED7E@apple.com>
References: <CAB56zCVJbkCWS3CLmG55cibLFwOoPdhWk8x==Z3JNaq8+f+eSw@mail.gmail.com>
	<04E50294-80DE-4967-8275-23E54B6EE235@apple.com>
	<2635E03F-8987-4A00-A855-2D3D2163ED7E@apple.com>
Message-ID: <0CA3A3BE-B988-473B-9E75-7B5F8BCFCD01@icloud.com>


> On 25 Feb 2016, at 9:34 AM, Daniel Dunbar via swift-users <swift-users at swift.org> wrote:
> 
> That is correct.
> 
> Ryan, did you install the 2.2 stable snapshot? It is expected that that snapshot doesn't include the Swift package manager (swift-build). If you want it, you should install the development snapshots.

I encountered this as well as I was definitely using the most recent development snapshot - swift-DEVELOPMENT-SNAPSHOT-2016-02-25-a-osx.

The installer said it was successful but I don’t see anything at /Library/Developer/Toolchains.

> 
>  - Daniel
> 
>> On Feb 25, 2016, at 9:31 AM, Joe Groff via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote:
>> 
>> 
>>> On Feb 25, 2016, at 7:54 AM, Ryan Baxter via swift-users <swift-users at swift.org <mailto:swift-users at swift.org>> wrote:
>>> 
>>> Hi,
>>> 
>>> I recently installed a Swift Development snapshot of the package manager on my system and added /Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin/swift to my path.  However when I do 'which swift' in my terminal it points to a binary in /usr/bin.  When I run 'swift build --help' I get '<unknown>:0: error: no such file or directory: 'build'' so clearly it is not the right swift binary.  I am not sure where the binary came from in /usr/bin but I cant delete it because OSX is telling me that it is needed by the operating system.  Has anyone encountered this before?
>> 
>> OS X puts forwarding stubs for various developer tools into /usr/bin that launch the corresponding tools from the active Xcode or Command Line Tools installation. IIRC you're supposed to use xcode-select, or change the toolchain within Xcode itself, instead of putting the toolchain directly in your path. You can then use `xcrun swift` to run swift with the correct environment set up.
>> 
>> -Joe
>> 
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org <mailto:swift-users at swift.org>
>> https://lists.swift.org/mailman/listinfo/swift-users
> 
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-Simon

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160227/b2f64ded/attachment.html>

From mscreboucas at gmail.com  Sat Feb 27 13:27:50 2016
From: mscreboucas at gmail.com (=?UTF-8?Q?Marcel_Rebou=C3=A7as?=)
Date: Sat, 27 Feb 2016 16:27:50 -0300
Subject: [swift-users] Help with swiftc target
Message-ID: <CAAhzreDrNmzdtHsQX4Y7K35ymmoYF5xRpXLcf2EVJEmHJBO2fg@mail.gmail.com>

Hello all,


I’ve been trying to use the ‘swiftc’ command from the version I built from
the source (build-script, swift-2.2-branch), and I am having problems with
the targets.


For example, I am able to use the command below just fine (which I believe
uses the swiftc I got with Xcode - version 2.1.1)


*$ xcrun -sdk iphoneos swiftc -target armv7-apple-ios8.0 *.swift*


But when I try to use it with my swiftc (version 2.2-dev), I receive an
error saying that it was unable to load a standard library for the target.
I also tried with the other targets at the end of the email.


*$ xcrun -sdk iphoneos
…/build/Ninja-DebugAssert/swift-macosx-x86_64/bin/swiftc -target
armv7-apple-ios8.0 *.swift*

*error: **unable to load standard library for target 'armv7-apple-ios8.0’*



It seems it is just working if I use the macosx sdk, but I wish to use the -sdk
iphoneos  or -sdk iphonesimulator to be able to import UIKit inside the
.swift file.


Do I have to build in a different way in order to use those targets? Or am
I doing something wrong? Maybe it has something to do with the contents of
the */Ninja-DebugAssert/swift-macosx-x86_64/* folder?



Thanks,

Marcel




The build-script log showed multiple targets.


OS X SDK:

Version: 10.11

Deployment version: 10.9

Library subduer: macosx

Version min name: macosx

Architectures: x86_64

Triple for x86_64 is x86_64-apple-macosx10.9


iOS SDK:

Version: 9.2

Deployment version: 7.0

Library subduer: iphoneos

Version min name: ios

Architectures: armv7;armv7s;arm64

Triple for armv7 is armv7-apple-ios7.0

Triple for armv7s is armv7s-apple-ios7.0

Triple for arm64 is arm64-apple-ios7.0


iOS Simulator SDK:

Version: 9.2

Deployment version: 7.0

Library subduer: iphonesimulator

Version min name: iso-simulator

Architectures: i386;x86_64

Triple for i386 is i386-apple-ios7.0

Triple for x86_64 is x86_64-apple-ios7.0
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160227/274ad081/attachment.html>

From mark.lacey at apple.com  Sat Feb 27 13:50:44 2016
From: mark.lacey at apple.com (Mark Lacey)
Date: Sat, 27 Feb 2016 11:50:44 -0800
Subject: [swift-users] Help with swiftc target
In-Reply-To: <CAAhzreDrNmzdtHsQX4Y7K35ymmoYF5xRpXLcf2EVJEmHJBO2fg@mail.gmail.com>
References: <CAAhzreDrNmzdtHsQX4Y7K35ymmoYF5xRpXLcf2EVJEmHJBO2fg@mail.gmail.com>
Message-ID: <E8F4AE96-05F0-4B5E-A266-05B8ACDEAD9B@apple.com>


> On Feb 27, 2016, at 11:27 AM, Marcel Rebouças via swift-users <swift-users at swift.org> wrote:
> 
> Hello all,
> 
> I’ve been trying to use the ‘swiftc’ command from the version I built from the source (build-script, swift-2.2-branch), and I am having problems with the targets.

What did your build command look like?

You need to specify ‘--ios’ (or the shorter ‘-i’) in order to build the pieces required to compile for iOS.

Mark

> 
> For example, I am able to use the command below just fine (which I believe uses the swiftc I got with Xcode - version 2.1.1)
> 
> $ xcrun -sdk iphoneos swiftc -target armv7-apple-ios8.0 *.swift
> 
> But when I try to use it with my swiftc (version 2.2-dev), I receive an error saying that it was unable to load a standard library for the target. I also tried with the other targets at the end of the email.
> 
> $ xcrun -sdk iphoneos  …/build/Ninja-DebugAssert/swift-macosx-x86_64/bin/swiftc -target armv7-apple-ios8.0 *.swift
> error: unable to load standard library for target 'armv7-apple-ios8.0’
> 
> 
> It seems it is just working if I use the macosx sdk, but I wish to use the -sdk iphoneos  or -sdk iphonesimulator to be able to import UIKit inside the .swift file.
> 
> Do I have to build in a different way in order to use those targets? Or am I doing something wrong? Maybe it has something to do with the contents of the /Ninja-DebugAssert/swift-macosx-x86_64/ folder?
> 
> 
> Thanks,
> Marcel
> 
> 
> 
> The build-script log showed multiple targets.
> 
> OS X SDK:
> Version: 10.11
> Deployment version: 10.9
> Library subduer: macosx
> Version min name: macosx
> Architectures: x86_64
> Triple for x86_64 is x86_64-apple-macosx10.9
> 
> iOS SDK:
> Version: 9.2
> Deployment version: 7.0
> Library subduer: iphoneos
> Version min name: ios
> Architectures: armv7;armv7s;arm64
> Triple for armv7 is armv7-apple-ios7.0
> Triple for armv7s is armv7s-apple-ios7.0
> Triple for arm64 is arm64-apple-ios7.0
> 
> iOS Simulator SDK:
> Version: 9.2
> Deployment version: 7.0
> Library subduer: iphonesimulator
> Version min name: iso-simulator
> Architectures: i386;x86_64
> Triple for i386 is i386-apple-ios7.0
> Triple for x86_64 is x86_64-apple-ios7.0
> 
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160227/7e347edf/attachment.html>

From mscreboucas at gmail.com  Sat Feb 27 14:07:47 2016
From: mscreboucas at gmail.com (=?UTF-8?Q?Marcel_Rebou=C3=A7as?=)
Date: Sat, 27 Feb 2016 17:07:47 -0300
Subject: [swift-users] Help with swiftc target
In-Reply-To: <E8F4AE96-05F0-4B5E-A266-05B8ACDEAD9B@apple.com>
References: <CAAhzreDrNmzdtHsQX4Y7K35ymmoYF5xRpXLcf2EVJEmHJBO2fg@mail.gmail.com>
	<E8F4AE96-05F0-4B5E-A266-05B8ACDEAD9B@apple.com>
Message-ID: <CAAhzreCye+Tb_jPfe2MyxZhDnf_g9WMAjQCpToP9=XABdZWcGQ@mail.gmail.com>

Hello Mark, I used the standard utils/build-script. I will try again after
rebuilding with --ios.

Thanks,
Marcel

2016-02-27 16:50 GMT-03:00 Mark Lacey <mark.lacey at apple.com>:

>
> On Feb 27, 2016, at 11:27 AM, Marcel Rebouças via swift-users <
> swift-users at swift.org> wrote:
>
> Hello all,
>
> I’ve been trying to use the ‘swiftc’ command from the version I built from
> the source (build-script, swift-2.2-branch), and I am having problems with
> the targets.
>
>
> What did your build command look like?
>
> You need to specify ‘--ios’ (or the shorter ‘-i’) in order to build the
> pieces required to compile for iOS.
>
> Mark
>
>
> For example, I am able to use the command below just fine (which I believe
> uses the swiftc I got with Xcode - version 2.1.1)
>
> *$ xcrun -sdk iphoneos swiftc -target armv7-apple-ios8.0 *.swift*
>
> But when I try to use it with my swiftc (version 2.2-dev), I receive an
> error saying that it was unable to load a standard library for the
> target. I also tried with the other targets at the end of the email.
>
> *$ xcrun -sdk iphoneos
> …/build/Ninja-DebugAssert/swift-macosx-x86_64/bin/swiftc -target
> armv7-apple-ios8.0 *.swift*
> *error: **unable to load standard library for target 'armv7-apple-ios8.0’*
>
>
> It seems it is just working if I use the macosx sdk, but I wish to use the -sdk
> iphoneos  or -sdk iphonesimulator to be able to import UIKit inside the
> .swift file.
>
> Do I have to build in a different way in order to use those targets? Or am
> I doing something wrong? Maybe it has something to do with the contents of
> the */Ninja-DebugAssert/swift-macosx-x86_64/* folder?
>
>
> Thanks,
> Marcel
>
>
>
> The build-script log showed multiple targets.
>
> OS X SDK:
> Version: 10.11
> Deployment version: 10.9
> Library subduer: macosx
> Version min name: macosx
> Architectures: x86_64
> Triple for x86_64 is x86_64-apple-macosx10.9
>
> iOS SDK:
> Version: 9.2
> Deployment version: 7.0
> Library subduer: iphoneos
> Version min name: ios
> Architectures: armv7;armv7s;arm64
> Triple for armv7 is armv7-apple-ios7.0
> Triple for armv7s is armv7s-apple-ios7.0
> Triple for arm64 is arm64-apple-ios7.0
>
> iOS Simulator SDK:
> Version: 9.2
> Deployment version: 7.0
> Library subduer: iphonesimulator
> Version min name: iso-simulator
> Architectures: i386;x86_64
> Triple for i386 is i386-apple-ios7.0
> Triple for x86_64 is x86_64-apple-ios7.0
>
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160227/f16cc1ad/attachment.html>

From rbaxter85 at gmail.com  Sat Feb 27 14:13:54 2016
From: rbaxter85 at gmail.com (Ryan Baxter)
Date: Sat, 27 Feb 2016 15:13:54 -0500
Subject: [swift-users] swift binary in /usr/bin
In-Reply-To: <0CA3A3BE-B988-473B-9E75-7B5F8BCFCD01@icloud.com>
References: <CAB56zCVJbkCWS3CLmG55cibLFwOoPdhWk8x==Z3JNaq8+f+eSw@mail.gmail.com>
	<04E50294-80DE-4967-8275-23E54B6EE235@apple.com>
	<2635E03F-8987-4A00-A855-2D3D2163ED7E@apple.com>
	<0CA3A3BE-B988-473B-9E75-7B5F8BCFCD01@icloud.com>
Message-ID: <0F3DB819-F1AA-4A28-89F6-29C848B4FDD9@gmail.com>

Yes I installed the development snapshot and the swift binary was installed in /Library/Developer/... But there was already an existing binary in /usr/bin that I can't seem to replace or remove.

-Ryan

> On Feb 27, 2016, at 2:21 PM, Simon Pilkington <simonmpilkington at icloud.com> wrote:
> 
> 
>> On 25 Feb 2016, at 9:34 AM, Daniel Dunbar via swift-users <swift-users at swift.org> wrote:
>> 
>> That is correct.
>> 
>> Ryan, did you install the 2.2 stable snapshot? It is expected that that snapshot doesn't include the Swift package manager (swift-build). If you want it, you should install the development snapshots.
> 
> I encountered this as well as I was definitely using the most recent development snapshot - swift-DEVELOPMENT-SNAPSHOT-2016-02-25-a-osx.
> 
> The installer said it was successful but I don’t see anything at /Library/Developer/Toolchains.
> 
>> 
>>  - Daniel
>> 
>>>> On Feb 25, 2016, at 9:31 AM, Joe Groff via swift-users <swift-users at swift.org> wrote:
>>>> 
>>>> 
>>>> On Feb 25, 2016, at 7:54 AM, Ryan Baxter via swift-users <swift-users at swift.org> wrote:
>>>> 
>>>> Hi,
>>>> 
>>>> I recently installed a Swift Development snapshot of the package manager on my system and added /Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin/swift to my path.  However when I do 'which swift' in my terminal it points to a binary in /usr/bin.  When I run 'swift build --help' I get '<unknown>:0: error: no such file or directory: 'build'' so clearly it is not the right swift binary.  I am not sure where the binary came from in /usr/bin but I cant delete it because OSX is telling me that it is needed by the operating system.  Has anyone encountered this before?
>>> 
>>> OS X puts forwarding stubs for various developer tools into /usr/bin that launch the corresponding tools from the active Xcode or Command Line Tools installation. IIRC you're supposed to use xcode-select, or change the toolchain within Xcode itself, instead of putting the toolchain directly in your path. You can then use `xcrun swift` to run swift with the correct environment set up.
>>> 
>>> -Joe
>>> 
>>> _______________________________________________
>>> swift-users mailing list
>>> swift-users at swift.org
>>> https://lists.swift.org/mailman/listinfo/swift-users
>> 
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org
>> https://lists.swift.org/mailman/listinfo/swift-users
> 
> -Simon
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160227/520b3ec3/attachment.html>

From jgroff at apple.com  Sat Feb 27 14:18:01 2016
From: jgroff at apple.com (Joe Groff)
Date: Sat, 27 Feb 2016 20:18:01 +0000 (UTC)
Subject: [swift-users] swift binary in /usr/bin
References: <CAB56zCVJbkCWS3CLmG55cibLFwOoPdhWk8x==Z3JNaq8+f+eSw@mail.gmail.com>
	<04E50294-80DE-4967-8275-23E54B6EE235@apple.com>
	<2635E03F-8987-4A00-A855-2D3D2163ED7E@apple.com>
	<0CA3A3BE-B988-473B-9E75-7B5F8BCFCD01@icloud.com>
	<0F3DB819-F1AA-4A28-89F6-29C848B4FDD9@gmail.com>
Message-ID: <nat09p$1o3$1@ger.gmane.org>

Ryan Baxter via swift-users <swift-users at swift.org> wrote:
> Yes I installed the development snapshot and the swift binary was
> installed in /Library/Developer/... But there was already an existing
> binary in /usr/bin that I can't seem to replace or remove.

The binary in /usr/bin is a stub that forwards to the active toolchain's
swift binary.

-Joe 

> 
> -Ryan
> 
>> On Feb 27, 2016, at 2:21 PM, Simon Pilkington <simonmpilkington at icloud.com> wrote:
>> 
>> 
>>> On 25 Feb 2016, at 9:34 AM, Daniel Dunbar via swift-users <swift-users at swift.org> wrote:
>>> 
>>> That is correct.
>>> 
>>> Ryan, did you install the 2.2 stable snapshot? It is expected that that
>>> snapshot doesn't include the Swift package manager (swift-build). If
>>> you want it, you should install the development snapshots.
>> 
>> I encountered this as well as I was definitely using the most recent
>> development snapshot - swift-DEVELOPMENT-SNAPSHOT-2016-02-25-a-osx.
>> 
>> The installer said it was successful but I don’t see anything at
>> /Library/Developer/Toolchains.
>> 
>>> 
>>> - Daniel
>>> 
>>>>> On Feb 25, 2016, at 9:31 AM, Joe Groff via swift-users <swift-users at swift.org> wrote:
>>>>> 
>>>>> 
>>>>> On Feb 25, 2016, at 7:54 AM, Ryan Baxter via swift-users <swift-users at swift.org> wrote:
>>>>> 
>>>>> Hi,
>>>>> 
>>>>> I recently installed a Swift Development snapshot of the package
>>>>> manager on my system and added
>>>>> /Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin/swift
>>>>> to my path.  However when I do 'which swift' in my terminal it points
>>>>> to a binary in /usr/bin.  When I run 'swift build --help' I get
>>>>> '<unknown>:0: error: no such file or directory: 'build'' so clearly
>>>>> it is not the right swift binary.  I am not sure where the binary
>>>>> came from in /usr/bin but I cant delete it because OSX is telling me
>>>>> that it is needed by the operating system.  Has anyone encountered this before?
>>>> 
>>>> OS X puts forwarding stubs for various developer tools into /usr/bin
>>>> that launch the corresponding tools from the active Xcode or Command
>>>> Line Tools installation. IIRC you're supposed to use xcode-select, or
>>>> change the toolchain within Xcode itself, instead of putting the
>>>> toolchain directly in your path. You can then use `xcrun swift` to run
>>>> swift with the correct environment set up.
>>>> 
>>>> -Joe
>>>> 
>>>> _______________________________________________
>>>> swift-users mailing list
>>>> swift-users at swift.org
>>>> https://lists.swift.org/mailman/listinfo/swift-users
>>> 
>>> _______________________________________________
>>> swift-users mailing list
>>> swift-users at swift.org
>>> https://lists.swift.org/mailman/listinfo/swift-users
>> 
>> -Simon
>> 
> 
> --Apple-Mail-CE469578-FBD9-43DC-8C2E-567BFBBD23FF
> Content-Type: text/html;
> 	charset=utf-8
> Content-Transfer-Encoding: quoted-printable
> 
> <html><head><meta http-equiv="content-type" content="text/html;
> charset=utf-8"></head><body dir="auto"><div>Yes I installed the
> development snapshot and the swift binary was installed in
> /Library/Developer/... But there was already an existing binary in
> /usr/bin that I can't seem to replace or
> remove.<br><br>-Ryan</div><div><br>On Feb 27, 2016, at 2:21 PM, Simon
> Pilkington &lt;
> a href="mailto:simonmpilkington at icloud.com">simonmpilkington at icloud.com</a>&gt;
> wrote:<br><br></div><blockquote type="cite"><div><meta
> http-equiv="Content-Type" content="text/html charset=utf-8"><br
> class=""><div><blockquote type="cite" class=""><div class="">On 25 Feb
> 2016, at 9:34 AM, Daniel Dunbar via swift-users &lt;<a
> href="mailto:swift-users at swift.org" class="">swift-users at swift.org</a>&gt; wrote:</div><br
> class="Apple-interchange-newline"><div class=""><meta
> http-equiv="Content-Type" content="text/html charset=us-ascii"
> class=""><div style="word-wrap: break-word; -webkit-nbsp-mode: space;
> -webkit-line-break: after-white-space;" class="">That is correct.<div
> class=""><br class=""></div><div class="">Ryan, did you install the 2.2
> stable snapshot? It is expected that that snapshot doesn't include the
> Swift package manager (swift-build). If you want it, you should install
> the development snapshots.</div></div></div></blockquote><div><br
> class=""></div>I encountered this as well as I was definitely using the
> most recent development snapshot
> -&nbsp;swift-DEVELOPMENT-SNAPSHOT-2016-02-25-a-osx.</div><div><br
> class=""></div><div>The installer said it was successful but I don’t see
> anything at&nbsp;<span style="color: rgb(41, 41, 41); font-family:
> 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif;"
> class="">/Library/Developer/Toolchains.</span></div><div><font
> color="#292929" face="Helvetica Neue, Helvetica, Arial, Lucida Grande,
> sans-serif" class=""><br class=""></font><blockquote type="cite"
> class=""><div class=""><div style="word-wrap: break-word;
> -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"
> class=""><div class=""><br class=""></div><div class="">&nbsp;-
> Daniel</div><div class=""><br class=""><div class=""><blockquote
> type="cite" class=""><div class="">On Feb 25, 2016, at 9:31 AM, Joe Groff
> via swift-users &lt;<a href="mailto:swift-users at swift.org"
> class="">swift-users at swift.org</a>&gt; wrote:</div><br
> class="Apple-interchange-newline"><div class=""><meta
> http-equiv="Content-Type" content="text/html charset=us-ascii"
> class=""><div style="word-wrap: break-word; -webkit-nbsp-mode: space;
> -webkit-line-break: after-white-space;" class=""><br class=""><div
> class=""><blockquote type="cite" class=""><div class="">On Feb 25, 2016,
> at 7:54 AM, Ryan Baxter via swift-users &lt;<a
> href="mailto:swift-users at swift.org" class="">swift-users at swift.org</a>&gt; wrote:</div><br
> class="Apple-interchange-newline"><div class=""><div dir="ltr"
> class="">Hi,<div class=""><br class=""></div><div class="">I recently
> installed a Swift Development snapshot of the package manager on my
> system and added&nbsp;<span
> style="color:rgb(41,41,41);font-family:'Helvetica Neue',Helvetica,Arial,'Lucida
> Grande',sans-serif"
> class="">/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin/swift to my
> path.&nbsp; However when I do 'which swift' in my terminal it points to a
> binary in /usr/bin.&nbsp; When I run '</span><font color="#292929"
> face="Helvetica Neue, Helvetica, Arial, Lucida Grande, sans-serif"
> class="">swift build --help' I get '&lt;unknown&gt;:0: error: no such
> file or directory: 'build'' so clearly it is not the right swift
> binary.&nbsp; I am not sure where the binary came from in /usr/bin but I
> cant delete it because OSX is telling me that it is needed by the
> operating system.&nbsp; Has anyone&nbsp;encountered&nbsp;this
> before?</font></div></div></div></blockquote><br class=""></div><div
> class="">OS X puts forwarding stubs for various developer tools into
> /usr/bin that launch the corresponding tools from the active Xcode or
> Command Line Tools installation. IIRC you're supposed to use
> xcode-select, or change the toolchain within Xcode itself, instead of
> putting the toolchain directly in your path. You can then use `xcrun
> swift` to run swift with the correct environment set up.</div><div
> class=""><br class=""></div><div class="">-Joe</div><br
> class=""></div>_______________________________________________<br
> class="">swift-users mailing list<br class=""><a
> href="mailto:swift-users at swift.org" class="">swift-users at swift.org</a><br
> class=""><a href="https://lists.swift.org/mailman/listinfo/swift-users"
> class="">https://lists.swift.org/mailman/listinfo/swift-users</a><br
> class=""></div></blockquote></div><br
> class=""></div></div>_______________________________________________<br
> class="">swift-users mailing list<br class=""><a
> href="mailto:swift-users at swift.org" class="">swift-users at swift.org</a><br
> class="">
> a href="https://lists.swift.org/mailman/listinfo/swift-users">https://lists.swift.org/mailman/listinfo/swift-users</a><br
> class=""></div></blockquote><br class=""></div><div>-Simon</div><br
> class=""></div></blockquote></body></html>
> --Apple-Mail-CE469578-FBD9-43DC-8C2E-567BFBBD23FF--
> 
> 





From mscreboucas at gmail.com  Sat Feb 27 16:14:59 2016
From: mscreboucas at gmail.com (=?UTF-8?Q?Marcel_Rebou=C3=A7as?=)
Date: Sat, 27 Feb 2016 19:14:59 -0300
Subject: [swift-users] Help with swiftc target
In-Reply-To: <CAAhzreCye+Tb_jPfe2MyxZhDnf_g9WMAjQCpToP9=XABdZWcGQ@mail.gmail.com>
References: <CAAhzreDrNmzdtHsQX4Y7K35ymmoYF5xRpXLcf2EVJEmHJBO2fg@mail.gmail.com>
	<E8F4AE96-05F0-4B5E-A266-05B8ACDEAD9B@apple.com>
	<CAAhzreCye+Tb_jPfe2MyxZhDnf_g9WMAjQCpToP9=XABdZWcGQ@mail.gmail.com>
Message-ID: <CAAhzreALJrMGMkoWJZJvuJOYS1p7fn4zMvmy505g-WCCHSCXNQ@mail.gmail.com>

It worked! I'll read the -h more carefully next time, it was explained
there. Thank you very much Mark.

Marcel

2016-02-27 17:07 GMT-03:00 Marcel Rebouças <mscreboucas at gmail.com>:

> Hello Mark, I used the standard utils/build-script. I will try again after
> rebuilding with --ios.
>
> Thanks,
> Marcel
>
> 2016-02-27 16:50 GMT-03:00 Mark Lacey <mark.lacey at apple.com>:
>
>>
>> On Feb 27, 2016, at 11:27 AM, Marcel Rebouças via swift-users <
>> swift-users at swift.org> wrote:
>>
>> Hello all,
>>
>> I’ve been trying to use the ‘swiftc’ command from the version I built
>> from the source (build-script, swift-2.2-branch), and I am having problems
>> with the targets.
>>
>>
>> What did your build command look like?
>>
>> You need to specify ‘--ios’ (or the shorter ‘-i’) in order to build the
>> pieces required to compile for iOS.
>>
>> Mark
>>
>>
>> For example, I am able to use the command below just fine (which I
>> believe uses the swiftc I got with Xcode - version 2.1.1)
>>
>> *$ xcrun -sdk iphoneos swiftc -target armv7-apple-ios8.0 *.swift*
>>
>> But when I try to use it with my swiftc (version 2.2-dev), I receive an
>> error saying that it was unable to load a standard library for the
>> target. I also tried with the other targets at the end of the email.
>>
>> *$ xcrun -sdk iphoneos
>> …/build/Ninja-DebugAssert/swift-macosx-x86_64/bin/swiftc -target
>> armv7-apple-ios8.0 *.swift*
>> *error: **unable to load standard library for target
>> 'armv7-apple-ios8.0’*
>>
>>
>> It seems it is just working if I use the macosx sdk, but I wish to use
>> the -sdk iphoneos  or -sdk iphonesimulator to be able to import UIKit
>> inside the .swift file.
>>
>> Do I have to build in a different way in order to use those targets? Or
>> am I doing something wrong? Maybe it has something to do with the contents
>> of the */Ninja-DebugAssert/swift-macosx-x86_64/* folder?
>>
>>
>> Thanks,
>> Marcel
>>
>>
>>
>> The build-script log showed multiple targets.
>>
>> OS X SDK:
>> Version: 10.11
>> Deployment version: 10.9
>> Library subduer: macosx
>> Version min name: macosx
>> Architectures: x86_64
>> Triple for x86_64 is x86_64-apple-macosx10.9
>>
>> iOS SDK:
>> Version: 9.2
>> Deployment version: 7.0
>> Library subduer: iphoneos
>> Version min name: ios
>> Architectures: armv7;armv7s;arm64
>> Triple for armv7 is armv7-apple-ios7.0
>> Triple for armv7s is armv7s-apple-ios7.0
>> Triple for arm64 is arm64-apple-ios7.0
>>
>> iOS Simulator SDK:
>> Version: 9.2
>> Deployment version: 7.0
>> Library subduer: iphonesimulator
>> Version min name: iso-simulator
>> Architectures: i386;x86_64
>> Triple for i386 is i386-apple-ios7.0
>> Triple for x86_64 is x86_64-apple-ios7.0
>>
>> _______________________________________________
>> swift-users mailing list
>> swift-users at swift.org
>> https://lists.swift.org/mailman/listinfo/swift-users
>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160227/29f14d71/attachment.html>

From swift-dev at ryan.lovelett.me  Sun Feb 28 08:38:36 2016
From: swift-dev at ryan.lovelett.me (Ryan Lovelett)
Date: Sun, 28 Feb 2016 09:38:36 -0500
Subject: [swift-users] Command failed due to signal: Illegal
	instruction: 4
In-Reply-To: <1456543074.1025456.533314210.559AA9C9@webmail.messagingengine.com>
References: <1456543074.1025456.533314210.559AA9C9@webmail.messagingengine.com>
Message-ID: <1456670316.52976.534146986.620A0052@webmail.messagingengine.com>

On Fri, Feb 26, 2016, at 10:17 PM, Ryan Lovelett via swift-users wrote:
> I'm trying to compile some code that interacts with FFmpeg and for the
> most part have been making progress. Until I added some AVFilter code.
> Now it is failing to compile with the error: "Command failed due to
> signal: Illegal instruction: 4".
> 
> The log Xcode provided of the build error is attached. All of the source
> code that was used to trigger the error can be found here
> (https://git.lovelett.me/castable/live) on a branch called "swift".
> 
>  Should I file a bug for this or am I doing something wrong?
> 
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users
> Email had 1 attachment:
> + swift.log
>   19k (application/octet-stream)

From jgroff at apple.com  Sun Feb 28 12:19:39 2016
From: jgroff at apple.com (Joe Groff)
Date: Sun, 28 Feb 2016 18:19:39 +0000 (UTC)
Subject: [swift-users] Command failed due to signal: Illegal
	instruction: 4
References: <1456543074.1025456.533314210.559AA9C9@webmail.messagingengine.com>
Message-ID: <navdnr$ng1$1@ger.gmane.org>

Ryan Lovelett via swift-users <swift-users at swift.org> wrote:
> I'm trying to compile some code that interacts with FFmpeg and for the
> most part have been making progress. Until I added some AVFilter code.
> Now it is failing to compile with the error: "Command failed due to
> signal: Illegal instruction: 4".
> 

The compiler crashing is always a bug. Please file a bug if you have time.
Thanks!

-Joe 

> The log Xcode provided of the build error is attached. All of the source
> code that was used to trigger the error can be found here
> (https://git.lovelett.me/castable/live) on a branch called "swift".
> 
>  Should I file a bug for this or am I doing something wrong?
> 
> 
> 
> 





From coding at marcofeltmann.de  Sun Feb 28 13:34:16 2016
From: coding at marcofeltmann.de (Marco Feltmann)
Date: Sun, 28 Feb 2016 20:34:16 +0100
Subject: [swift-users] Learning OpenGL with Swift
In-Reply-To: <CANEjtCBek0Din6-TZJvp0WQ9ZTSx+V_5RnJkyziFz+zgdLbzqg@mail.gmail.com>
References: <CANEjtCD1ctQP1wqZXUCbVX7t8RB+EX2C=a47N+uNm8gnU8XkDQ@mail.gmail.com>
	<20160223210013.GB10160@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
	<56CCF35E.2070406@zoho.com>
	<20160224215921.GB1624@B116M.Speedport_W_724V_Typ_A_05011603_00_007>
	<CANEjtCBek0Din6-TZJvp0WQ9ZTSx+V_5RnJkyziFz+zgdLbzqg@mail.gmail.com>
Message-ID: <20160228193416.GA12911@B116M.Speedport_W_724V_Typ_A_05011603_00_007>

On Thu, Feb 25, 2016 at 11:35:26AM -0800, David Turnbull wrote:
> On Wed, Feb 24, 2016 at 1:59 PM, Marco Feltmann via swift-users <
> swift-users at swift.org> wrote:
> 
> Renaming to drop the 3 should be filed as a bug in your distro. 

I don't think so.
IMHO it is the correct way to _not_ label the current version of a library. I'd prefer GLFW whichever version is the current one.
When there was a heavy API change from GLFW 2.x to GLFW 3.x the older
version still used should be labelled GLFW2 instead of labelling the new
one GLFW3. 
Otherwise noone will ever likely be updating their sources to the
current library version.

From swift-dev at ryan.lovelett.me  Sun Feb 28 15:29:01 2016
From: swift-dev at ryan.lovelett.me (Ryan Lovelett)
Date: Sun, 28 Feb 2016 16:29:01 -0500
Subject: [swift-users] Command failed due to signal: Illegal
	instruction: 4
In-Reply-To: <navdnr$ng1$1@ger.gmane.org>
References: <1456543074.1025456.533314210.559AA9C9@webmail.messagingengine.com>
	<navdnr$ng1$1@ger.gmane.org>
Message-ID: <1456694941.151877.534365906.1A23D408@webmail.messagingengine.com>

On Sun, Feb 28, 2016, at 01:19 PM, Joe Groff via swift-users wrote:
> Ryan Lovelett via swift-users <swift-users at swift.org> wrote:
> > I'm trying to compile some code that interacts with FFmpeg and for the
> > most part have been making progress. Until I added some AVFilter code.
> > Now it is failing to compile with the error: "Command failed due to
> > signal: Illegal instruction: 4".
> > 
> 
> The compiler crashing is always a bug. Please file a bug if you have
> time.
> Thanks!
> 
> -Joe

Joe, thank you confirming my hunch. I've gone ahead and done that.
https://bugs.swift.org/browse/SR-846

As you might imagine this is now a blocking bug for my project. I'd
really like to fix this as soon as humanly possible.

I also realize that, while a priority for me, it is may not be for
anyone else. With that in mind, my assumption is that if its going to be
fixed "soon" I probably need to fix it myself. Unfortunately, I have
little experience with this and would not know where to begin. Is there
anything I can read that might explain how to begin debugging the
compiler?

> 
> > The log Xcode provided of the build error is attached. All of the source
> > code that was used to trigger the error can be found here
> > (https://git.lovelett.me/castable/live) on a branch called "swift".
> > 
> >  Should I file a bug for this or am I doing something wrong?
> > 
> > 
> > 
> > 
> 
> 
> 
> 
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users

From ramakrishna.malli at gmail.com  Sun Feb 28 21:54:14 2016
From: ramakrishna.malli at gmail.com (Ramakrishna Mallireddy)
Date: Mon, 29 Feb 2016 09:24:14 +0530
Subject: [swift-users] Command failed due to signal: Illegal
	instruction: 4
In-Reply-To: <1456694941.151877.534365906.1A23D408@webmail.messagingengine.com>
References: <1456543074.1025456.533314210.559AA9C9@webmail.messagingengine.com>
	<navdnr$ng1$1@ger.gmane.org>
	<1456694941.151877.534365906.1A23D408@webmail.messagingengine.com>
Message-ID: <CA+mxoxfcJinj+QyAm36AD73L-1HojmPt+ozzQgcmHMjSW=aosg@mail.gmail.com>

You can debug the swift front-end in Xcode.
I haven't found the correct solution to generate the xcode Debug project
that builds and runs straight away, but managed to do it with little work
arounds to have the swift code debug running in Xcode. It mightn't be the
correct solution, but I got what I am looking for i.e debugging swift
front-end in xcode.

On Mon, Feb 29, 2016 at 2:59 AM, Ryan Lovelett via swift-users <
swift-users at swift.org> wrote:

> On Sun, Feb 28, 2016, at 01:19 PM, Joe Groff via swift-users wrote:
> > Ryan Lovelett via swift-users <swift-users at swift.org> wrote:
> > > I'm trying to compile some code that interacts with FFmpeg and for the
> > > most part have been making progress. Until I added some AVFilter code.
> > > Now it is failing to compile with the error: "Command failed due to
> > > signal: Illegal instruction: 4".
> > >
> >
> > The compiler crashing is always a bug. Please file a bug if you have
> > time.
> > Thanks!
> >
> > -Joe
>
> Joe, thank you confirming my hunch. I've gone ahead and done that.
> https://bugs.swift.org/browse/SR-846
>
> As you might imagine this is now a blocking bug for my project. I'd
> really like to fix this as soon as humanly possible.
>
> I also realize that, while a priority for me, it is may not be for
> anyone else. With that in mind, my assumption is that if its going to be
> fixed "soon" I probably need to fix it myself. Unfortunately, I have
> little experience with this and would not know where to begin. Is there
> anything I can read that might explain how to begin debugging the
> compiler?
>
> >
> > > The log Xcode provided of the build error is attached. All of the
> source
> > > code that was used to trigger the error can be found here
> > > (https://git.lovelett.me/castable/live) on a branch called "swift".
> > >
> > >  Should I file a bug for this or am I doing something wrong?
> > >
> > >
> > >
> > >
> >
> >
> >
> >
> > _______________________________________________
> > swift-users mailing list
> > swift-users at swift.org
> > https://lists.swift.org/mailman/listinfo/swift-users
> _______________________________________________
> swift-users mailing list
> swift-users at swift.org
> https://lists.swift.org/mailman/listinfo/swift-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.swift.org/pipermail/swift-users/attachments/20160229/b45dfe94/attachment.html>

